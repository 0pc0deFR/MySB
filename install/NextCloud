#!/bin/bash
# rev 6.0
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# https://docs.nextcloud.com/server/16/admin_manual/configuration_server/occ_command.html
##################### FIRST LINE #####################################

#### Switch (INSTALL/UPGRADE/INIT)
if [ -n "${1}" ]; then
    sSwitch="${1}"
fi

#### VARs
MailFrom="$(echo "${gsMainUserEmail}" | cut -d "@" -f 1)"
MailDomain="$(echo "${gsMainUserEmail}" | cut -d "@" -f 2)"
# TimeStamp=$(date +%s)
NextCloudDataDirectory="/home/nextcloud"
source /etc/MySB/config_db

function fnBaseConfig() {
    local bCreateExtMounts
    bCreateExtMounts="${1}"

    #### Generating a new config file
    if [ -d "${gsNextCloudDir}" ] && [ -f "${gsNextCloudDir}"/config/config.php ] && gfnCheckCommand 0 "${gsNextCloudDir}"/occ; then
        if [[ ${gnRepoUpgrade} -eq 1 ]]; then
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
        fi

        #### Base
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"

        #### Check old config file
        Version="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get version" | tail -n 1)"
        # Version="$(grep "'version'" "${gsNextCloudDir}"/config/config.php | cut -d "'" -f 3)"
        echo "Version: ${Version}"
        InstanceId="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get instanceid")"
        # InstanceId="$(grep "'instanceid'" "${gsNextCloudDir}"/config/config.php | cut -d "'" -f 3)"
        echo "Instance ID: ${InstanceId}"
        Secret="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get secret")"
        # Secret="$(grep "'secret'" "${gsNextCloudDir}"/config/config.php | cut -d "'" -f 3)"
        echo "Secret: ${Secret}"
        PasswordSalt="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get passwordsalt")"
        # PasswordSalt="$(grep "'passwordsalt'" "${gsNextCloudDir}"/config/config.php | cut -d "'" -f 3)"
        echo "PasswordSalt: ${PasswordSalt}"

        #### New config file
        install -g www-data -o www-data -m 0640 "${MySB_InstallDir}"/templates/nextcloud/nextcloud.config.php.tmpl "${gsNextCloudDir}"/config/config.php
        perl -pi -e "s/<version>/${Version}/g" "${gsNextCloudDir}"/config/config.php

        nNumLine=$(grep '<instanceid>' -n -m 1 "${gsNextCloudDir}"/config/config.php | cut -d ':' -f 1)
        sed -i '/<instanceid>/d' "${gsNextCloudDir}"/config/config.php
        sed -i "${nNumLine}i\'instanceid' => '${InstanceId}'," "${gsNextCloudDir}"/config/config.php

        nNumLine=$(grep '<passwordsalt>' -n -m 1 "${gsNextCloudDir}"/config/config.php | cut -d ':' -f 1)
        sed -i '/<passwordsalt>/d' "${gsNextCloudDir}"/config/config.php
        sed -i "${nNumLine}i\'passwordsalt' => '${PasswordSalt}'," "${gsNextCloudDir}"/config/config.php

        nNumLine=$(grep '<secret>' -n -m 1 "${gsNextCloudDir}"/config/config.php | cut -d ':' -f 1)
        sed -i '/<secret>/d' "${gsNextCloudDir}"/config/config.php
        sed -i "${nNumLine}i\'secret' => '${Secret}'," "${gsNextCloudDir}"/config/config.php

        nNumLine=$(grep '<dbpassword>' -n -m 1 "${gsNextCloudDir}"/config/config.php | cut -d ':' -f 1)
        sed -i '/<dbpassword>/d' "${gsNextCloudDir}"/config/config.php
        sed -i "${nNumLine}i\'dbpassword' => '${MySQL_MysbPassword}'," "${gsNextCloudDir}"/config/config.php

        #### Base
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:add-missing-indices"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:convert-filecache-bigint --no-interaction"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-db"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-js"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable files_external"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable notifications"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ background:cron"

        #### Update DB
        cmdMySQL 'MySB_db' "UPDATE repositories SET version = '${Version}' WHERE name='NextCloud';" -v

        # config:system:set
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 0 --value=127.0.0.1"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 1 --value=localhost"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set trusted_domains 2 --value=${gsHostNameFqdn}:${gsPort_MySB_HTTPS}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set default_language --value=${EnvLang}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set force_language --value=false"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set default_locale --value=${gsLocale}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set force_locale --value=${gsLocale}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set lost_password_link --value=https://${gsHostNameFqdn}:${gsPort_MySB_HTTPS}/?user/change-password.html"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mail_domain --value=${MailDomain}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mail_from_address --value=${MailFrom}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set overwritehost --value=${gsHostNameFqdn}:${gsPort_MySB_HTTPS}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set overwrite.cli.url --value=https://localhost:${gsPort_MySB_HTTPS}/nc"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set logtimezone --value=${gsTimeZone}"
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set skeletondirectory --value=${gsNextCloudDir}/core/skeleton"
        # MySQL utf8mb4
        Version="$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get version" | cut -d "." -f 1)"
        if [ "${Version}" -ge "16" ]; then
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:set mysql.utf8mb4 --type boolean --value=true"
        fi

        # Password policy
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:app:set --update-only --value=no password_policy enabled"

        # group:add
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ group:add MySB_users"

        if [ "${bCreateExtMounts}" -eq 1 ]; then
            #### Clean actual external mounts (MySB_Home)
            for nId in $(cmdMySQL 'NextCloud_db' "SELECT mount_id FROM nc_external_mounts WHERE mount_point='/MySB_Home';"); do
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:delete ${nId} --yes"
            done

            #### Create all existing MySB users AND Scanning users' files
            gfnListCountUsers 'normal'
            for seedUser in ${gsUsersList}; do
                FnUserMail="$(cmdMySQL 'MySB_db' "SELECT users_email FROM users WHERE users_ident='${seedUser}';")"

                if [ ! -d "${NextCloudDataDirectory}"/"${seedUser}" ]; then
                    mkdir -v "${NextCloudDataDirectory}"/"${seedUser}"
                    chown -v www-data:www-data "${NextCloudDataDirectory}"/"${seedUser}"
                    chmod -v 0755 "${NextCloudDataDirectory}"/"${seedUser}"
                fi

                if (! su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:info \"${seedUser}\""); then
                    OC_PASS="$(cmdMySQL 'MySB_db' "SELECT users_passwd FROM users WHERE users_ident='${seedUser}';")"
                    [ -z "${OC_PASS}" ] && OC_PASS="$(gfnGenPassword 8)"
                    export OC_PASS
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:add --password-from-env --display-name=\"${seedUser}\" --group=\"MySB_users\" \"${seedUser}\""
                    cmdMySQL 'MySB_db' "UPDATE users SET init_password = '1' WHERE users_ident='${seedUser}';" -v
                fi

                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" settings email \"${FnUserMail}\""
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" core lang \"${EnvLang}\""
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ user:setting \"${seedUser}\" core timezone ${gsTimeZone}"

                #### Create new external mount (MySB_Home)
                IdStorage=$(su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:create MySB_Home local null::null" | awk '{ print $5 }')
                if [ -n "${IdStorage}" ]; then
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:applicable --add-user \"${seedUser}\" ${IdStorage}"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:config ${IdStorage} datadir '/home/${seedUser}/'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} filesystem_check_changes 'true'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encrypt 'false'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} previews 'true'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} enable_sharing 'true'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:option ${IdStorage} encoding_compatibility 'false'"
                    su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files_external:verify ${IdStorage}"
                fi

                #### Force a scan
                su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:scan --path=\"/${seedUser}/files/MySB_Home\""

                unset IdStorage FnUserMail OC_PASS
            done
        else
            #### Base
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ upgrade -v"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ config:system:get version"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:add-missing-indices"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ db:convert-filecache-bigint --no-interaction"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:repair"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-db"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mimetype:update-js"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable files_external"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ app:enable notifications"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ background:cron"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ sharing:cleanup-remote-storages"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:cleanup"
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --off"
        fi
    fi
}

#### Installation / Upgrade ?
if [ "${gbToInstall_NextCloud}" == "YES" ] && [ "${sSwitch}" != "INIT" ]; then
    if ! gfnCheckCommand 0 smbclient; then
        gfnPackageBundleInstall 'smbclient'
    fi

    #### VARs
    gfnGetRepoValues 'NextCloud'

    #### STOP services
    gfnManageServices stop "${binPhpService} nginx"

    #### ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/post_max_size = 10M/post_max_size = 20G/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/upload_max_filesize = 10M/upload_max_filesize = 20G/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/max_file_uploads = 20/max_file_uploads = 20000/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/output_buffering = 4096/output_buffering = Off/g" ${gsPhpDir}/fpm/php.ini
    # OPCache
    perl -pi -e "s/;opcache.enable=0/opcache.enable=1/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.enable_cli=0/opcache.enable_cli=1/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.interned_strings_buffer=4/opcache.interned_strings_buffer=8/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.max_accelerated_files=2000/opcache.max_accelerated_files=10000/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.memory_consumption=64/opcache.memory_consumption=128/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.save_comments=1/opcache.save_comments=1/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" ${gsPhpDir}/fpm/php.ini
    perl -pi -e "s/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/g" ${gsPhpDir}/fpm/php.ini
    #### ${gsPhpDir}/fpm/pool.d/www.conf
    perl -pi -e "s/^;env\[PATH\]/env\[PATH\]/g" ${gsPhpDir}/fpm/pool.d/www.conf

    #### NginX configuration
    install -v -g root -o root -m 0600 "${MySB_InstallDir}"/templates/nginx/etc.nginx.locations.nextcloud.conf.tmpl /etc/nginx/locations/NextCloud.conf
    perl -pi -e "s/<MySB_InstallDir>/${gsInstallDirEscaped}/g" /etc/nginx/locations/NextCloud.conf

    #### An upgrade ?
    if [[ ${gnRepoUpgrade} -eq 1 ]]; then
        if gfnCheckCommand 0 php; then
            su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:mode --on"
        fi
        # Backup the config file if needed
        if [ -f "${gsNextCloudDir}"/config/config.php ]; then
            mv -v "${gsNextCloudDir}"/config/config.php "${MySB_InstallDir}"/temp/nextcloud_config.php
        fi
        if [ -d "${gsNextCloudDir}"/apps2 ]; then
            mv -v "${gsNextCloudDir}"/apps2 "${MySB_InstallDir}"/temp/nextcloud_apps2
        fi
        if [ -f ${MySB_Files}/${gsRepoFile} ]; then
            gfnDeleteDirectory 1 "${gsNextCloudDir}"
        fi
        # Maybe need to launch a script on next reboot ?
        # Disable the upgrade job
        cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade = '0', on_boot = '1', script = '$0' WHERE name='NextCloud';" -v
    fi

    # if [ ! -d "${gsNextCloudDir}" ]; then
    #     gfnRepoManageByType
    # fi

    [ "${gnRepoUpgrade}" -eq 1 ] && gfnDeleteDirectory 1 "${gsNextCloudDir}"
    gfnRepoManageByType

    # Restore the old config file
    if [ -f "${MySB_InstallDir}"/temp/nextcloud_config.php ]; then
        mv -v "${MySB_InstallDir}"/temp/nextcloud_config.php "${gsNextCloudDir}"/config/config.php
    fi
    if [ -d "${MySB_InstallDir}"/temp/nextcloud_apps2 ]; then
        if [ -d "${gsNextCloudDir}"/apps2 ]; then
            rm -rfv "${gsNextCloudDir}"/apps2
        fi
        mv -v "${MySB_InstallDir}"/temp/nextcloud_apps2 "${gsNextCloudDir}"/apps2
    else
        mkdir -pv "${gsNextCloudDir}"/apps2
    fi
    # Create needed directories & files
    if [ ! -d "${NextCloudDataDirectory}" ]; then
        mkdir -pv "${NextCloudDataDirectory}"
    fi
    touch /var/log/nextcloud.log
    chown -v www-data:www-data /var/log/nextcloud.log
    chown www-data:www-data "${NextCloudDataDirectory}"
    # Clean some files and directories
    rm -rfv "${gsNextCloudDir}"/data
    rm -fv "${gsNextCloudDir}"/config/config.sample.php
    rm -fv "${NextCloudDataDirectory}"/mount.json
    if [ -f "${NextCloudDataDirectory}"/nextcloud.log ]; then
        cat "${NextCloudDataDirectory}"/nextcloud.log >>/var/log/nextcloud.log
        rm -fv "${NextCloudDataDirectory}"/nextcloud.log*
    fi

    #### CRON
    crontab -u www-data -l >/tmp/crontab.tmp
    sed -i '/NextCloud/d' /tmp/crontab.tmp
    echo "*/15  *  *  *  * php -f ${gsNextCloudDir}/cron.php > /dev/null 2>&1 # NextCloud" | tee -a /tmp/crontab.tmp
    crontab -u www-data /tmp/crontab.tmp
    rm -f /tmp/crontab.tmp
    # su -s /bin/sh www-data -c "/usr/bin/php -f ${gsNextCloudDir}/cron.php > /dev/null 2>&1"

    #### Create directories & change rights
    gfnManageDirAndFiles 'global'

    #### START services
    gfnManageServices start "${binPhpService} nginx"

    #### Database directory does not exist ? So we do the first install !
    if [[ (! -f "${gsNextCloudDir}"/config/config.php) || (! -s "${gsNextCloudDir}"/config/config.php) ]] && [ "$(ls -la /var/lib/mysql/NextCloud_db/*.* | wc -l)" -le 1 ]; then
        chown -R www-data:www-data "${gsNextCloudDir}"/
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ maintenance:install --database \"mysql\" --database-host \"localhost:/run/mysqld/mysqld.sock\" --database-name \"NextCloud_db\" --database-user \"MySB_user\" --database-pass \"${MySQL_MysbPassword}\" --admin-user \"admin\" --admin-email=\"${gsMainUserEmail}\" --admin-pass \"${MySQL_MysbPassword}\" --database-table-prefix \"nc_\" --data-dir \"${NextCloudDataDirectory}\" --no-interaction"
        # Maybe need to launch a script on next reboot ?
        cmdMySQL 'MySB_db' "UPDATE repositories SET on_boot = '1', script = '$0' WHERE name='NextCloud';" -v
    fi

    if gfnCheckCommand 0 "${gsNextCloudDir}"/occ; then
        # Upgrade
        fnBaseConfig 1

        # NextCloud is installed
        cmdMySQL 'MySB_db' "UPDATE services SET to_install = '0', is_installed = '1' WHERE serv_name='NextCloud';" -v
        gbIsInstalled_NextCloud="YES"
        sSwitch="INIT"

        # Force upgrade script on next boot if needed
        if [ -n "$(cmdMySQL 'MySB_db' "SELECT script FROM repositories WHERE on_boot = '1' AND name = 'NextCloud';")" ]; then
            cmdMySQL 'MySB_db' "UPDATE repositories SET on_boot = '1', script = '$0' WHERE name='NextCloud';" -v
        fi
    fi

    #### Logrotate
    gfnLogRotate 'nextcloud'

    #### Fail2Ban
    if [ "${gbToInstall_Fail2Ban}" == "YES" ] || [ "${gbIsInstalled_Fail2Ban}" == "YES" ] && [ -d /etc/fail2ban/filter.d ] && [ "${sSwitch}" != "INIT" ]; then
        install -v -g root -o root -m 0700 "${MySB_InstallDir}"/templates/fail2ban/etc.fail2ban.filter.d.nextcloud.tmpl /etc/fail2ban/filter.d/nextcloud.conf
        if [ -z "$(grep '\[nextcloud\]' /etc/fail2ban/jail.local)" ]; then
            (
                cat <<'EOF'

[nextcloud]
enabled  	= true
port	 	= <Port_MySB_HTTPS>
filter   	= nextcloud
logpath  	= /var/log/nextcloud.log
EOF
            ) >>/etc/fail2ban/jail.local
            sed -i "s/<Port_MySB_HTTPS>/${gsPort_MySB_HTTPS}/g;" /etc/fail2ban/jail.local
        fi
    fi
fi

#### Upgrade on boot
# Forced on lines 220 & 221
if [ "${gbIsInstalled_NextCloud}" == "YES" ] && [ "${sSwitch}" == "INIT" ]; then
    OnBoot="$(cmdMySQL 'MySB_db' "SELECT on_boot FROM repositories WHERE name = 'NextCloud';")"

    #### Fail2Ban
    if [ "${gbToInstall_Fail2Ban}" == "YES" ] || [ "${gbIsInstalled_Fail2Ban}" == "YES" ]; then
        if [ -d /etc/fail2ban ]; then
            install -v -g root -o root -m 0700 "${MySB_InstallDir}"/templates/fail2ban/etc.fail2ban.filter.d.nextcloud.tmpl /etc/fail2ban/filter.d/nextcloud.conf
            if [ -z "$(grep '\[nextcloud\]' /etc/fail2ban/jail.local)" ]; then
                (
                    cat <<'EOF'

[nextcloud]
enabled  	= true
port	 	= <Port_MySB_HTTPS>
filter   	= nextcloud
logpath  	= /var/log/nextcloud.log
EOF
                ) >>/etc/fail2ban/jail.local
                sed -i "s/<Port_MySB_HTTPS>/${gsPort_MySB_HTTPS}/g;" /etc/fail2ban/jail.local
            fi
        fi
    fi

    if [ "${OnBoot}" -eq 1 ]; then
        #### NextCloud upgrade
        fnBaseConfig 0

        #### Display 'config.php' for logs
        cat "${gsNextCloudDir}"/config/config.php

        #### Backuping config file
        if [ -f "${gsNextCloudDir}"/config/config.php ]; then
            cp -v "${gsNextCloudDir}"/config/config.php "${MySB_InstallDir}"/files/nextcloud_config.php
        fi

        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ integrity:check-core" >/tmp/nextcloud_check_integrity.log
        if [ -f /tmp/nextcloud_check_integrity.log ]; then
            cat /tmp/nextcloud_check_integrity.log
            sed -i '/INVALID_HASH/d' /tmp/nextcloud_check_integrity.log
            sed -i '/expected/d' /tmp/nextcloud_check_integrity.log
            sed -i '/current/d' /tmp/nextcloud_check_integrity.log
            while read sLine; do
                sFile="${gsNextCloudDir}/$(echo "${sLine}" | awk '{ print $2 }' | sed 's/://g;')"
                if [ -f "${sFile}" ]; then
                    # sCharset="$(file -i "${sFile}" | awk '{ print $3 }' | cut -d "=" -f 2 | tr [:lower:] [:upper:])"
                    iconv -f us-ascii -t utf-16 "${sFile}" -o "${sFile}.tmp"
                    iconv -f utf-16le -t utf-8 "${sFile}" -o "${sFile}.tmp"
                    [ -f "${sFile}.tmp" ] && rm -v "${sFile}.tmp"
                fi
            done </tmp/nextcloud_check_integrity.log
        fi
        su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ integrity:check-core"

        cmdMySQL 'MySB_db' "UPDATE repositories SET on_boot = '0', script = '' WHERE name='NextCloud';" -v
        # Disable the upgrade job
        cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='0' WHERE name='NextCloud';" -v

        # Scann all files
        screen -dmS NextCloud_ScanAll su -s /bin/sh www-data -c "/usr/bin/php ${gsNextCloudDir}/occ files:scan --all"
    fi
fi

{ [ -d /home/admin/ ] && [ "$(find /home/admin/ -type f 2>/dev/null | wc -l)" -eq 0 ]; } && rm -rfv /home/admin/

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
