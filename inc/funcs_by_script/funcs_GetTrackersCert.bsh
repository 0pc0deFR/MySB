#!/bin/bash
# rev 5.5
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
{ [ -z "${vars}" ] || [ "${vars}" -ne 1 ]; } && {
    echo "Please load 'vars' file before..."
    return
}
##################### FIRST LINE #####################################

#### Restore validated annoncers
gfnAnnoncerActivate() {
    local nCgiPort sInfoHash sId bIsActive aValidatedTorrents sRequestValues sValue sTorrent
    aValidatedTorrents=()

    sRequestValues="$(cmdMySQL 'MySB_db' "SELECT scgi_port,info_hash,id,user FROM annoncers WHERE 1;" | sed 's/\t/|/g;')"
    for sValue in ${sRequestValues}; do
        nCgiPort="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[1]}')"
        sInfoHash="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[2]}')"
        sId="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[3]}')"
        sUser="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[4]}')"

        sGetUrl="$(xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} t.url ${sInfoHash}:${sId} 2>/dev/null)"
        if [ -n "${sGetUrl}" ]; then
            echo "Checking: ${sGetUrl}"
            sProto="$(echo "${sGetUrl}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')" # extract the protocol
            echo "  Protocol: ${sProto//:\/\//}"
            sURL=$(echo "${sGetUrl}" | sed -e s,${sProto},,g)
            echo "  URL: ${sURL}"
            sUrlUser="$(echo "${sURL}" | grep @ | cut -d@ -f1)" # extract the user (if any)
            sHostPort=$(echo "${sURL}" | sed -e s,${sUrlUser}@,,g | cut -d/ -f1) # extract the host and port
            echo "  Host & Port: ${sHostPort}"
            sHost="$(echo "${sHostPort}" | sed -e 's,:.*,,g')" # by request host without port
            echo "  Host: ${sHost}"
            sPort="$(echo "${sHostPort}" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')" # by request - try to extract the port
            case ${sPort#[-+]} in
                *[!0-9]* | '')
                    case "${sProto//:\/\//}" in
                        'http' | 'udp') sPort=80 ;;
                        'https')        sPort=443 ;;
                    esac
                    ;;
            esac
            echo "  Port: ${sPort}"
            # extract the path (if any)
            sURI="$(echo "${sURL}" | grep '/' | cut -d/ -f2-)"
            echo "  URI: ${sURI}"

            # Get if activate
            bIsActive="$(cmdMySQL 'MySB_db' "SELECT is_active FROM trackers_list WHERE tracker='${sHost}' AND tracker_proto='${sProto//:\/\//}' AND tracker_port='${sPort}';")"
            bIsActive="${bIsActive:-1}"
            su -s /bin/bash "${sUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} t.is_enabled.set ${sInfoHash}:${sId} ${bIsActive} >/dev/null"
            if [[ ${bIsActive} -eq 1 ]]; then
                sResult="Enabled"
                aValidatedTorrents=("${nCgiPort}|${sInfoHash}")
            else
                sResult="Disabled"
            fi
            echo "${sResult}: ${sGetUrl}"
        else
            echo "sGetUrl is empty !!!"
        fi
        cmdMySQL 'MySB_db' "DELETE FROM annoncers WHERE scgi_port='${nCgiPort}' AND info_hash='${sInfoHash}' AND id='${sId}' AND user='${sUser}';" -v
    done

    # Uniq
    [ "${#aValidatedTorrents[*]}" -gt 0 ] && mapfile -t aValidatedTorrents < <(echo "${aValidatedTorrents[*]}" | tr ' ' '\n' | sort | uniq)

    # Start validated torrents
    for sTorrent in "${aValidatedTorrents[@]}"; do
        nCgiPort="$(echo "${sTorrent}" | awk '{split($0,a,"|"); print a[1]}')"
        sInfoHash="$(echo "${sTorrent}" | awk '{split($0,a,"|"); print a[2]}')"

        su -s /bin/bash "${sUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.start ${sInfoHash} >/dev/null"
        su -s /bin/bash "${sUser}" -c "xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.save_full_session ${sInfoHash} >/dev/null"
    done
}

#### Check added torrents
gfnCheckAddedTorrents() {
    local sTracker sProto sPrivacy sUser
    # local sTrackerList
    [ -n "${1}" ] && sUser="${1}" || return 1
    # sTrackerList=()

    # while read -r line; do
    #     sTrackerList+=("${line}")
    # done <"/home/.check_annoncers_${sUser}"

    # Uniq
    # mapfile -t sTrackerList < <(echo "${sTrackerList[*]}" | tr ' ' '\n' | sort | uniq)

    # Add trackers
    while [ -s "/home/.check_annoncers_${sUser}" ]; do
        while read -r sTracker; do
            if [ -n "${sTracker}" ]; then
                gfnAddTracker "${sTracker}" "${sUser}"
                # YGG
                # (grep -q 'tracker.yggserver.net' <<<${sTracker} ) && gfnAddTracker "${sTracker//tracker.yggserver.net/tracker.ygg.is}"

                # Enable/Disable annoncers
                gfnAnnoncerActivate
            else
                # Clean file
                : >"/home/.check_annoncers_${sUser}"
            fi
        done <"/home/.check_annoncers_${sUser}"
    done

    # Send mail to mainuser for annoncers added
    gfnSendMail "${AnnoncersAddedMailSubject}" "${gsMainUserName}" "annoncers_added"

    # for sTracker in "${sTrackerList[@]}"; do
    #     if [ -n "${sTracker}" ]; then
    #         gfnAddTracker "${sTracker}" "${sUser}"
    #         # YGG
    #         # (grep -q 'tracker.yggserver.net' <<<${sTracker} ) && gfnAddTracker "${sTracker//tracker.yggserver.net/tracker.ygg.is}"
    #     fi
    # done
    # Clean file
    # : >"/home/.check_annoncers_${sUser}"
}

#### Add new trackers
gfnAddTracker() {
    local sPrivacy sTracker sPart1 sPart2 sPart3 sTrackerDomain sTrackerAddress sIfExist sTrackersListId sUser
    local sProto sURL sUrlUser sHostPort sHost sPort
    local dAptDate tNow tVarX tVarY tDiff
    # local sURI
    #local aDomainIPv4 aTrackerIPv4
    local aTrackerIPv4
    local bAutoBlockAnnoncers

    sTracker="${1}"
    if [ -n "${2}" ] && [ -n "$(getent passwd "${2}")" ]; then
        sUser="${2}"
        sLineToDelete="${sTracker}"
    fi
    # aDomainIPv4=()
    aTrackerIPv4=()
    bAutoBlockAnnoncers="$(cmdMySQL 'MySB_db' "SELECT block_annoncers FROM system WHERE id_system='1';")"

    if [ -n "${sTracker}" ]; then
        sInfoHash="$(echo "${sTracker}" | cut -d '|' -f 3)"
        sPrivacy="$(echo "${sTracker}" | cut -d '|' -f 2)"
        sTracker="$(echo "${sTracker}" | cut -d '|' -f 1)"

        # extract the protocol
        sProto="$(echo "${sTracker}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
        [ -z "${sProto}" ] && sProto="http://"
        # remove the protocol
        sURL="$(echo "${sTracker}" | sed -e s,${sProto},,g)"
        sProto="${sProto//:\/\//}"
        # extract the user (if any)
        sUrlUser="$(echo "${sURL}" | grep @ | cut -d@ -f1)"
        # extract the host and port
        sHostPort="$(echo "${sURL}" | sed -e s,${sUrlUser}@,,g | cut -d/ -f1)"
        # by request host without port
        sHost="$(echo "${sHostPort}" | sed -e 's,:.*,,g')"
        # by request - try to extract the port
        sPort="$(echo "${sHostPort}" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
        case ${sPort#[-+]} in
            *[!0-9]* | '')
                case "${sProto}" in
                    'http' | 'udp') sPort=80 ;;
                    'https') sPort=443 ;;
                esac
                ;;
        esac
        # extract the path (if any)
        # sURI="$(echo "${sURL}" | grep '/' | cut -d/ -f2-)"
        # hostname & domain
        sPart1="$(echo "${sHost}" | cut -d "." -f 1)"
        sPart2="$(echo "${sHost}" | cut -d "." -f 2)"
        sPart3="$(echo "${sHost}" | cut -d "." -f 3)"
        if [ -z "${sPart3}" ]; then
            sTrackerDomain="${sPart1}.${sPart2}"
            sTrackerAddress="${sTrackerDomain}"
        else
            sTrackerDomain="${sPart2}.${sPart3}"
            sTrackerAddress="${sPart1}.${sTrackerDomain}"
        fi

        # DEBUG
        # {
        #     echo "sPrivacy $sPrivacy"
        #     echo "sTracker $sTracker"
        #     echo "sProto $sProto"
        #     echo "sURL $sURL"
        #     echo "sUrlUser $sUrlUser"
        #     echo "sHostPort $sHostPort"
        #     echo "sHost $sHost"
        #     echo "sPort $sPort"
        #     echo "sURI $sURI"
        #     echo "sParts ${sPart1} ${sPart2} ${sPart3}"
        #     echo "sTrackerDomain $sTrackerDomain"
        #     echo "sTrackerAddress $sTrackerAddress"
        #     echo
        # } >${MySB_InstallDir}/logs/${gsScriptName}_debug.log

        # 1/ Check tracker address
        if [ -n "${sTrackerAddress}" ]; then
            dAptDate="$(cmdMySQL 'MySB_db' "SELECT last_check FROM trackers_list WHERE tracker='${Tracker}';")"
            [ "${dAptDate}" == "0000-00-00 00:00:00" ] && dAptDate="$(date +%Y-%m-%d\ %H:%M:%S)"
            [ -z "${dAptDate}" ] && dAptDate="$(date +%Y-%m-%d\ %H:%M:%S)"
            dAptDate=$(date -d "${dAptDate}" +"%Y-%m-%d %H")
            tNow=$(date +%Y-%m-%d\ %H)
            tVarX=$(date --date="${dAptDate}" +'%-H')
            tVarY=$(date --date="${tNow}" +'%-H')
            tDiff=$((tVarY - tVarX))

            mapfile -t aTrackerIPv4 < <(nslookup "${sTrackerAddress}" | grep 'Address:' | awk '{ print $2 }' | tail -n +2 | sed -e 's/^ //g;' | sed 's/\s+$//')

            if [ "${#aTrackerIPv4[@]}" -gt 0 ] && [ "${tDiff}" -le 2 ]; then
                # Add address if needed
                sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sTrackerAddress}';")"
                if [ -z "$sIfExist" ]; then
                    log_daemon_msg "${AddTrackerDomain} ${sTrackerAddress}:${sPort}"
                    cmdMySQL 'MySB_db' "INSERT INTO trackers_list (tracker,tracker_domain,tracker_proto,tracker_port,tracker_uri,privacy,is_active,to_check,last_check) VALUES ('${sTrackerAddress}','${sTrackerDomain}','${sProto}','${sPort}','','${sPrivacy}','1','1','$(date +%Y-%m-%d\ %H:%M:%S)');"
                    # curl --retry 3 --silent --show-error --data "username=${gsMainUserName}&tracker=${sTrackerAddress}&tracker_domain=${sTrackerDomain}&tracker_proto=${sProto}&tracker_port=${sPort}" http://localhost:8888/rTorrent
                    echo "${sProto%://}://${sTrackerAddress}:${sPort} (${sPrivacy})" >>/tmp/trackers_added.log
                    gfnStatusLSB
                else
                    log_daemon_msg "${UpdateTrackerDomain} ${sTrackerAddress}:${sPort}"
                    cmdMySQL 'MySB_db' "UPDATE trackers_list SET tracker_port='${sPort}', last_check='$(date +%Y-%m-%d\ %H:%M:%S)' WHERE tracker='${sTrackerAddress}';"
                    gfnStatusLSB
                fi

                # Add address IPv4 and clean if needed
                sTrackersListId="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sTrackerAddress}';")"
                if [ -n "${sTrackersListId}" ] && [ "${sTrackersListId}" -gt 0 ]; then
                    log_daemon_msg "${UpdateTrackersIPv4} '${sTrackerAddress}' --> '${aTrackerIPv4[*]}'"
                    # Cleaning
                    ListIPv4="$(cmdMySQL 'MySB_db' "SELECT ipv4 FROM trackers_list_ipv4 WHERE id_trackers_list='${sTrackersListId}';")"
                    for IPv4 in ${ListIPv4}; do
                        if (! grep -q "${IPv4}" <<<${aTrackerIPv4[*]}); then
                            cmdMySQL 'MySB_db' "DELETE FROM trackers_list_ipv4 WHERE ipv4='${IPv4}' AND id_trackers_list='${sTrackersListId}';"
                        fi
                    done
                    unset IPv4 ListIPv4
                    # Add
                    for IPv4 in "${aTrackerIPv4[@]}"; do
                        case "${IPv4}" in
                            '127.0.0.1' | '0.0.0.0') continue ;;
                            *)
                                dAptDate="$(cmdMySQL 'MySB_db' "SELECT last_check FROM trackers_list_ipv4 WHERE id_trackers_list='${sTrackersListId}' AND ipv4='${IPv4}';")"
                                [ "$dAptDate" == "0000-00-00 00:00:00" ] && dAptDate="$(date +%Y-%m-%d\ %H:%M:%S)"
                                dAptDate=$(date -d "${dAptDate}" +"%Y-%m-%d %H")
                                tNow=$(date +%Y-%m-%d\ %H)
                                tVarX=$(date --date="${dAptDate}" +'%-H')
                                tVarY=$(date --date="${tNow}" +'%-H')
                                tDiff=$((tVarY - tVarX))

                                # PeerGuardian check blocked IP
                                bToBlock=0
                                if [ "${gbIsInstalled_PeerGuardian}" == "YES" ]; then
                                    pglcmd search "${IPv4}" >"/tmp/${gsScriptName}_pglcmd.log"
                                    sed -i "/${IPv4}/d" "/tmp/${gsScriptName}_pglcmd.log"
                                    sed -i '/^$/d' "/tmp/${gsScriptName}_pglcmd.log"
                                    sed -i "/If you don't want to block the above shown ranges/d" "/tmp/${gsScriptName}_pglcmd.log"
                                    sed -i "/Or you may remove some of these lists from/d" "/tmp/${gsScriptName}_pglcmd.log"
                                    [ -s "/tmp/${gsScriptName}_pglcmd.log" ] && bToBlock=1
                                    rm -f "/tmp/${gsScriptName}_pglcmd.log"
                                fi

                                if [[ ${tDiff} -le 2 ]] || [[ ${bToBlock} -eq 1 ]]; then
                                    sPingResult="$(ping -c2 -w3 "${IPv4}" | grep 'packets transmitted' | cut -d ',' -f 3)"

                                    sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list_ipv4 FROM trackers_list_ipv4 WHERE id_trackers_list='${sTrackersListId}' AND ipv4='${IPv4}';")"
                                    if [ -z "$sIfExist" ]; then
                                        cmdMySQL 'MySB_db' "INSERT INTO trackers_list_ipv4 (id_trackers_list,ipv4,pgl_banned,ping,last_check) VALUES ('${sTrackersListId}','${IPv4}','${bToBlock}','${sPingResult}','$(date +%Y-%m-%d\ %H:%M:%S)');"
                                    else
                                        cmdMySQL 'MySB_db' "UPDATE trackers_list_ipv4 SET pgl_banned='${bToBlock}', ping='${sPingResult}', last_check='$(date +%Y-%m-%d\ %H:%M:%S)' WHERE ipv4='${IPv4}' AND id_trackers_list='${sTrackersListId}';"
                                    fi

                                    bActive="$(cmdMySQL 'MySB_db' "SELECT is_active FROM trackers_list WHERE tracker='${sTrackerAddress}';")"
                                    if [[ ${bAutoBlockAnnoncers} -eq 1 ]] && [[ ${bToBlock} -eq 1 ]]; then
                                        bActive=0
                                    fi
                                fi
                                ;;
                        esac
                    done
                    unset IPv4 aTrackerIPv4
                    if [[ ${tDiff} -le 2 ]] || [[ ${bToBlock} -eq 1 ]]; then
                        cmdMySQL 'MySB_db' "UPDATE trackers_list SET tracker_domain='${sTrackerDomain}', is_active='${bActive}' WHERE tracker='${sTrackerAddress}';"
                    fi
                    gfnStatusLSB
                fi
            else
                sIfExist="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${sTrackerAddress}';")"
                if [ -n "$sIfExist" ]; then
                    log_daemon_msg "${DeleteTracker} ${sTrackerAddress}"
                    cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_dead='1', is_active='0' WHERE tracker='${sTrackerAddress}';"
                    gfnStatusLSB
                fi
            fi
        fi

        if [ -f "/home/.check_annoncers_${sUser}" ] && [ -n "${sLineToDelete}" ]; then
            sed -i "/${sLineToDelete}/d" "/home/.check_annoncers_${sUser}"
        fi
    fi
}

##################### LAST LINE ######################################
