#!/bin/bash
# -----------------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# -----------------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

case "${1}" in
    "BEFORE")
        ####################################
        #### To call for every upgrade - BoF
        # Get new vars after MySQL.bsh script
        # shellcheck source=inc/vars
        source "${MySB_InstallDir}"/inc/vars

        # Create missing directories and change rights
        gfnManageDirAndFiles 'global'

        # Switching DNS
        gfnSwitchDNS "bind"

        # Forcing NTP update
        ping -c4 0.pool.ntp.org
        /usr/sbin/ntpdate -u 0.pool.ntp.org 1.pool.ntp.org

        # Debian upgrade
        [ -f /tmp/MySB_UpgradeMe.log ] && cat /tmp/MySB_UpgradeMe.log >>"${MySB_InstallDir}"/logs/BulkChanges.bsh.log

        # MySQL
        [ -f /tmp/MySQL.bsh.log ] && cat /tmp/MySQL.bsh.log >>"${MySB_InstallDir}"/logs/BulkChanges.bsh.log

        # VARs & Functions
        # shellcheck source=inc/funcs_by_script/funcs_Install
        [ -z "${funcs_Install}" ] && source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_Install
        # shellcheck source=inc/funcs_by_script/funcs_SourcesList
        [ -z "${funcs_SourcesList}" ] && source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_SourcesList

        # Remove old banners
        rm -fv "${MySB_InstallDir}"/files/banner_*

        # Force install for depends
        # shellcheck source=inc/funcs_by_script/funcs_Install
        source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_Install
        gfnPackagesManage install
        #### To call for every upgrade - EoF
        ####################################

        # md5sum file
        rm -fv "${gsCheckSumFile}"
        ${binCURL//silent/progress} -o "${gsCheckSumFile}" https://raw.githubusercontent.com/toulousain79/MySB_files/v7.3/md5sum.txt

        #### Nextcloud - Rename database table prefix _nc to _oc (removove in v20...)
        if [[ "${gbIsInstalled_NextCloud}" == "YES" ]]; then
            gfnManageServices stop "cron ${binPhpService}"
            nDbSize=$(mysql --database=NextCloud_db --wait --connect-timeout=10 --skip-column-names --skip-column-names -e "SELECT ROUND(SUM(data_length) / 1024 / 1024, 0) FROM information_schema.TABLES WHERE table_schema='NextCloud_db';")
            if (mysqldump --single-transaction --order-by-primary --compress NextCloud_db | pv --progress --size "${nDbSize}"m >/tmp/NextCloud_db.dump.sql); then
                cp -fv "${gsNextCloudDir}"/config/config.php /tmp/nextcloud_config.php

                sAllTables=$(mysql NextCloud_db -e "show tables" | tail -n +2)
                for sTable in ${sAllTables}; do
                    mysql NextCloud_db -e "RENAME TABLE ${sTable} to ${sTable//nc_/oc_}"
                done
                sed -i "s/dbtableprefix'\s*=>\s*'nc_'/dbtableprefix' => 'oc_'/" "${gsNextCloudDir}"/config/config.php
            else
                exit 1
            fi
        fi

        #### NextCloud - Upgrade to 19.0.4
        echo -e "${Upgrade_InstallingConfiguring} NextCloud to 19.0.4..."
        if [[ "${gbToInstall_NextCloud}" == "YES" ]] || [[ "${gbIsInstalled_NextCloud}" == "YES" ]]; then
            cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='1', version='19.0.4', file='nextcloud_v19.0.4.zip', url='https://download.nextcloud.com/server/releases/nextcloud-19.0.4.zip' WHERE name='NextCloud';" -v
            cmdMySQL 'MySB_db' "UPDATE services SET to_install='1' WHERE serv_name='NextCloud';" -v
            source "${MySB_InstallDir}"/inc/vars
            gfnGetRepoValues 'NextCloud'
            ${binCURL//silent/progress} -o "${MySB_Files}/${gsRepoFile}" "${gsRepoURL}"

            gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/NextCloud" 'UPGRADE'

            #### Force use of Redis unix socket (after upgrade to 19.0.4)
            sed -i \
                -e "s,'host' => '127.0.0.1','host' => '/var/run/redis/redis-server.sock',g;" \
                -e "s,'port' => 6379,'port' => 0,g;" \
                "${gsNextCloudDir}"/config/config.php

            cmdMySQL 'MySB_db' "UPDATE services SET to_install='1' WHERE serv_name='NextCloud';" -v
            cmdMySQL 'MySB_db' "UPDATE repositories SET upgrade='1', version='20.0.1', file='nextcloud_v20.0.1.zip', url='https://download.nextcloud.com/server/releases/nextcloud-20.0.1.zip' WHERE name='NextCloud';" -v
            source "${MySB_InstallDir}"/inc/vars
        else
            echo -e "${Global_NothingToDo}"
        fi
        ;;

    "AFTER" | "INIT")
        ####################################
        #### To call for every upgrade - BoF
        if gfnCheckCommand 0 ldconfig; then
            log_daemon_msg "${IncAfter_ConfigureDynamicLinks}"
            /sbin/ldconfig
            gfnStatusLSB
        fi
        #### Free cache server
        ## To free pagecache, dentries and inodes
        sync
        [ ! -f /.dockerenv ] && echo 3 >/proc/sys/vm/drop_caches
        # Create missing directories and change rights
        gfnManageDirAndFiles 'global'

        # STOP & START services
        gfnManageServices stop "ntp postfix stunnel4 smbd nginx ${binPhpService} redis-server webmin dnscrypt-proxy"
        gfnManageServices start "dnscrypt-proxy ntp stunnel4 postfix smbd redis-server ${binPhpService} webmin nginx"

        # Update version info
        cmdMySQL 'MySB_db' "UPDATE system SET mysb_version = '${gsCurrentVersion}' WHERE id_system='1';" -v

        # Create new security rules
        gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'create' 'UPGRADE'

        # Send mail for each user with new version
        # shellcheck source=/dev/null
        source "${MySB_InstallDir}"/inc/vars
        # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
        source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_MySB_CreateUser
        gfnListCountUsers 'normal'

        echo
        echo "################################################################################"
        for sUser in ${gsUsersList}; do
            echo
            echo "########## ${sUser}"
            sRequestValues="$(cmdMySQL 'MySB_db' "SELECT id_users,users_passwd,proxy_port,scgi_port FROM users WHERE users_ident = '${sUser}';" | sed 's/\t/|/g;')"
            UserId="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[1]}')"
            UserPassword="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[2]}')"
            nProxyPort="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[3]}')"
            sPortSCGI="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[4]}')"
            sUserUpper="$(echo "${sUser}" | tr '[:lower:]' '[:upper:]')"

            # rTorrent init
            install -v -o root -g root -m 0755 "${MySB_InstallDir}"/templates/rtorrent/etc.init.d.rtorrent.tmpl "/etc/init.d/rtorrent-${sUser}"
            perl -pi -e "s/<username>/${sUser}/g" "/etc/init.d/rtorrent-${sUser}"
            systemctl daemon-reload
            systemctl disable rtorrent-"${sUser}"
            # rTorrent Config File
            gfnCreateRtorrentConfigFile "${sUser}" 'force'

            if [ "${UserId}" == "${gnMainUserId}" ] && [ -n "${UserPassword}" ]; then
                # Remove main user password from database
                cmdMySQL 'MySB_db' "UPDATE users SET users_passwd = '' WHERE admin = '1';" -v
                gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_ChangeUserPassword" "${sUser}" "${UserPassword}" 'UPGRADE'
                # else
                # Init password required
                # echo "Uncomment lines below for send reset password mail to users"
                # cmdMySQL 'MySB_db' "UPDATE users SET init_password = '1' WHERE users_ident = '${sUser}';" -v
                # Subject="${Upgrade_SubjectUpgraded} ${gsCurrentVersion}"
                # gfnSendMail "${Subject}" "${sUser}" "upgrade"
            fi

            # Change some rights
            chown -v "${sUser}":"${sUser}" /home/"${sUser}"/.ssh/authorized_keys
            chmod -v 0644 /home/"${sUser}"/.ssh/authorized_keys

            # Console tweaks
            install -o root -g root -m 0644 "${MySB_InstallDir}"/templates/tweaks/bashrc.tmpl /home/"${sUser}"/.bashrc
            install -o "${sUser}" -g "${sUser}" -m 0644 "${MySB_InstallDir}"/templates/tweaks/profile.tmpl /home/"${sUser}"/.profile
            install -o "${sUser}" -g "${sUser}" -m 0644 "${MySB_InstallDir}"/templates/tweaks/bash_aliases.tmpl /home/"${sUser}"/.bash_aliases
            install -o "${sUser}" -g "${sUser}" -m 0644 "${MySB_InstallDir}"/templates/tweaks/bash_profile.tmpl /home/"${sUser}"/.bash_profile
            install -o "${sUser}" -g "${sUser}" -m 0644 /etc/skel/.bash_logout /home/"${sUser}"/.bash_logout

            # OpenVPN - Create again clients configurations if needed
            if [ "$(find /etc/openvpn/clients/ -maxdepth 1 -type f -name "${sUser}*" 2>/dev/null | wc -l)" -eq 0 ]; then
                gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/install/OpenVPN" 'client' "${sUser}" 'UPGRADE'
            fi

            # Add users allowed commands to sudoers.d (used by rTorrent scripts)
            {
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -av /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/cp -alv /home/*/rtorrent/* /home/${sUser}/rtorrent/complete/*"
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:${sUser} /home/${sUser}/rtorrent/complete/*"
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/chown -Rv ${sUser}\:mysb_users /home/${sUser}/rtorrent/complete/*"
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash ${MySB_InstallDir}/scripts/GetTrackersCert.bsh USER ${sUser} [A-Z0-9]*"
                echo "${sUser} ALL= EXEC: NOPASSWD: /bin/bash /home/${sUser}/.rTorrent_tasks.sh*"
            } >"/etc/sudoers.d/MySB_${sUser}"
            chmod 0440 "/etc/sudoers.d/MySB_${sUser}"

            # NginX files
            # install -g root -o root -m 0600 "${MySB_InstallDir}"/templates/nginx/etc.nginx.proxy.user.conf.tmpl /etc/nginx/proxy/rutorrent-"${sUser}".conf
            install -g root -o root -m 0600 "${MySB_InstallDir}"/templates/nginx/etc.nginx.rpc.user.conf.tmpl /etc/nginx/rpc/"${sUser}".conf
            install -g root -o root -m 0600 "${MySB_InstallDir}"/templates/nginx/etc.nginx.rpc.user.local.tmpl /etc/nginx/rpc/"${sUser}".local
            perl -pi \
                -e "s/<scgi_port>/${sPortSCGI}/g;" \
                -e "s/<username>/${sUser}/g;" \
                -e "s/<USERNAME>/${sUserUpper}/g;" \
                /etc/nginx/rpc/"${sUser}".conf \
                /etc/nginx/rpc/"${sUser}".local
            # /etc/nginx/proxy/rutorrent-"${sUser}".conf

            {
                echo "upstream rtorrent-${sUser} {"
                echo "  server unix:/run/rtorrent/${sUser}.sock;"
                echo "}"
            } >/etc/nginx/upstream/rtorrent-"${sUser}".conf
            {
                echo "upstream rutorrent_${sUser} {"
                echo "  server 127.0.0.1:${nProxyPort};"
                echo "}"
            } >/etc/nginx/upstream/rutorrent-"${sUser}".conf

            unset UserId UserPassword

            # Minio normal users
            gfnMinioUsersBuckets create "${sUser}"
        done

        # Minio main user
        gfnMinioUsersBuckets update
        echo "################################################################################"
        echo

        #### Apply quota for users
        gfnManageQuota '-v'

        #### Check actuel quota
        repquota -a

        #### Cleaning
        gfnDeleteDirectory 1 "${MySB_InstallDir}/temp/"{*,.*}
        updatedb
        for file in $(locate "*.dpkg-old" "*.dpkg-new" "*.dpkg-dist" "*.dpkg-bak" "*.ucf-dist"); do
            if [ -n "${gbDevMode}" ] && [[ ${gbDevMode} -eq 1 ]]; then
                mv -vf "${file}" "${MySB_InstallDir}"/logs/TODEL/
            else
                rm -vf "${file}"
            fi
        done

        #### Reset services to install
        cmdMySQL 'MySB_db' "UPDATE services SET to_install='0' WHERE 1;" -v

        #### Flush mail queue
        if gfnCheckCommand 0 postfix && gfnGetPid postfix; then postfix flush; fi
        #### To call for every upgrade - EoF
        ####################################
        ;;
esac

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
