#!/bin/bash
# rev 5.5
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
# t.type:               1: http / 2: udp
##################### FIRST LINE #####################################

# ARGS: $d.hash=,$d.name=,$d.directory=,$d.loaded_file=,$d.custom2=,$d.custom1=

#### VARs - From .rtorrent.rc config file
sInfoHash="${1}"        # $d.hash=
sName="${2}"            # $d.name=
sDirectory="${3}"       # $d.directory=
sTorrentLoaded="${4}"   # $d.loaded_file=
sTorrentDir="${5}"      # $d.custom2=
sLabel="${6}"           # $d.custom1=

sName="$(echo "${sName}" | sed -e "s/'/\\\'/g;")"

#### VARs - Default sets
nContinue=0
nExit=0
sUserName="$(whoami)"
nCgiPort="<scgi_port>"
dTimestamp="$(date +%Y/%m/%d\ %H:%M:%S)"
sLogFile="$(mktemp)"
sSqlParams='--defaults-extra-file=/home/.config.cnf --database=MySB_db -w --connect-timeout=10 -s -N'
nTotalStep="$(grep -e 'Step [1-9]* -' $0 | wc -l)"

# Torrent file uploaded via ruTorrent ?
if [ -z "${sTorrentLoaded}" ] && [ -n "${sTorrentDir}" ] && [ -f "${sTorrentDir}" ]; then
    sTorrentLoaded="${sTorrentDir}"
    sTorrentDir="/home/${sUserName}/rtorrent/torrents/"
    [ -n "${sLabel}" ] && sTorrentDir="${sTorrentDir%/}/${sLabel}/"
fi

sTorrentFile="${sTorrentDir%/}/$(basename "${sTorrentLoaded}")"
(grep -q "${sName}" <<<"${sTorrentDir}") && sFinalDirectory="${sDirectory}" || sFinalDirectory="${sDirectory%/}/${sName}"

#### Do some checks before
[ -z "${sInfoHash}" ] && nExit=1
[ -z "${sName}" ] && nExit=1
[ -z "${sDirectory}" ] && nExit=1
( [ -z "${sTorrentLoaded}" ] || [ ! -f "${sTorrentLoaded}" ] ) && nExit=1
( [ -z "${sTorrentDir}" ] || [ ! -d "${sTorrentDir}" ] ) && nExit=1

#### VARs -
[ -f "${sTorrentLoaded}" ] && sPrivacy="$(transmission-show "${sTorrentLoaded}" | grep -m 1 'Privacy: ' | awk '{printf $2}' | tr '[:upper:]' '[:lower:]')"
sRequestValues="$(mysql ${sSqlParams} -e "SELECT public_tracker_allow,files_recycling,annoncers_udp,annoncers_check FROM system WHERE id_system='1';" | sed 's/\t/|/g;')"
sTrackerModeAllowed="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
sFilesRecycling="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
bAnnoncersUdp="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[3]}')"
bAnnoncersCheck="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[4]}')"

#### Language
case "${LANG:0:2}" in
    "fr")
        sMessPrivacyPrivate="Privés seulement"
        sMessPrivacyPublic="Privés & Publiques"
        sMessFileRecyclingFind="Recyclage possible, copie en cours..."
        sMessFileRecyclingEnd="Recyclage possible, copie terminée..."
        sStep1="(1/${nTotalStep}) - Torrent chargé ! Proviens d'un tracker ${sPrivacy}."
        sStep2="(2/${nTotalStep}) - Trackers autorisés..."
        sStep3="(3/${nTotalStep}) - Journalisation des infos du torrent..."
        sStep4="(4/${nTotalStep}) - Arrêt temporaire du torrent pour vérification des annonceurs..."
        sStep5="(5/${nTotalStep}) - Référencement des annonceurs (HTTP, HTTPs, UDP et IPv6)..."
        sStep6="(6/${nTotalStep}) - Désactivation des annonceurs IPv6..."
        sStep7="(7/${nTotalStep}) - Préparation des annonceurs HTTP, HTTPs et UDP à être vérifiés et ajoutés..."
        case "${sFilesRecycling}" in
            1)  sMess="Copie simple" ;;
            2)  sMess="Lien dur" ;;
        esac
        sStep8="(8/${nTotalStep}) - Si activé, utilisation du recyclage de fichiers (${sMess})..."
        sStep9="(9/${nTotalStep}) - Sauvegarde du torrent et lancement du téléchargement..."
        sStep10="(10/${nTotalStep}) - Mise à jour du quota..."
        ;;
    "en")
        sMessPrivacyPrivate="Privates only"
        sMessPrivacyPublic="Privates & Publics"
        sMessFileRecyclingFind="Recycling possible, copy in progress..."
        sMessFileRecyclingEnd="Recycling possible, copy completed..."
        sStep1="(1/${nTotalStep}) - Torrent loaded ! Come from ${sPrivacy} tracker."
        sStep2="(2/${nTotalStep}) - Verification of authorized trackers..."
        sStep3="(3/${nTotalStep}) - Logging torrent info..."
        sStep4="(4/${nTotalStep}) - Temporary torrent stop for annoncers check..."
        sStep5="(5/${nTotalStep}) - Annoncers referencing (HTTP, HTTPs, UDP and IPv6)..."
        sStep6="(6/${nTotalStep}) - Disabling IPv6 annoncers..."
        sStep7="(7/${nTotalStep}) - Prepare for HTTP, HTTPs and UDP advertisers to be checked and added..."
        case "${sFilesRecycling}" in
            1)  sMess="Simple copy" ;;
            2)  sMess="Hard link" ;;
        esac
        sStep8="(8/${nTotalStep}) - If enabled, use file recycling (${sMess})..."
        sStep9="(9/${nTotalStep}) - Saving the torrent and launching the download..."
        sStep10="(10/${nTotalStep}) - Quota update..."
        ;;
esac

#### Functions - BoF
fnCopyFile() {
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep8} (${sMessFileRecyclingFind})"

    case "${sFilesRecycling}" in
        1) # Simple copy
            sParams=("-av")
            sOwners=("${sUserName}:${sUserName}")
            ;;
        2) # Hard link
            sParams=("-alv")
            sOwners=("${sUserName}:MySB_users")
            ;;
    esac

    if (sudo cp "${sParams[@]}" "${sTree}" "${sDirectory}"/); then
        sudo chown -Rv "${sOwners[@]}" "${sFinalDirectory}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.open ${sInfoHash} >>"${sLogFile}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.check_hash ${sInfoHash} >>"${sLogFile}"
        mysql ${sSqlParams} -e "INSERT INTO torrents (info_hash,name,privacy,state,tree) VALUES ('${sInfoHash}', '${sName}', '${sPrivacy}', 'completed', '${sFinalDirectory}');" -v
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep8} (${sMessFileRecyclingEnd})"
    fi
}
#### Functions - EoF

#### Step 1 - Add preogress message to torrent
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep1}"

#### Step 2 - Check if the tracker is allowed & annoncers cleaning
case "${sTrackerModeAllowed}" in
    "private")
        [ "${sPrivacy}" == "private" ] && nContinue=1 || nContinue=0
        sMess="${sMessPrivacyPrivate}"
        ;;
    "public")
        nContinue=1
        sMess="${sMessPrivacyPublic}"
        ;;
    *) nContinue=0 ;;
esac
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep2} (${sMess})"
[[ ${nExit} -eq 1 ]] && nContinue=0

#### Step 3 - Log header
{
    echo "################################################################################"
    echo "Timestamp: ${dTimestamp}"
    echo "Name: ${sName}"
    echo "Hash: ${sInfoHash}"
    echo "Label: ${sLabel}"
    echo "Directory: ${sDirectory}"
    echo "Complete dest: ${sFinalDirectory}"
    case "${sFilesRecycling}" in
        0) sValue="Disabled" ;;
        1) sValue="Simple copy" ;;
        2) sValue="Hard link" ;;
    esac
    echo "File recycling: ${sValue}"
    echo "Annoncer check: ${bAnnoncersCheck}" | sed 's/0/NO/g;' | sed 's/1/YES/g;'
    echo "Annoncer UDP: ${bAnnoncersUdp}" | sed 's/0/NO/g;' | sed 's/1/YES/g;'
    echo "Tracker privacy: ${sPrivacy}"
    echo "Trackers allowed: ${sTrackerModeAllowed}"
    echo "Torrent loaded: ${sTorrentLoaded}"
    echo "Torrent dir: ${sTorrentDir}"
    echo "Torrent file: ${sTorrentFile}"
    echo "--------------"
} >>"${sLogFile}"
xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep3}"

#### Step 4 - Close torrent from rTorrent queue
if [[ ${nExit} -eq 0 ]]; then
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep4}"
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.stop ${sInfoHash} >>"${sLogFile}"
fi

if [[ ${nContinue} -eq 1 ]]; then
    #### Step 5 - List & count annoncers
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep5}"

    declare -A aAnnoncers
    aAnnoncersUdp=()
    aAnnoncersIpv=()
    aAnnoncersHttp=()
    aAnnoncersHttps=()
    nCountAnnoncers=0
    nId=0

    for sAnnoncer in $(transmission-show "${sTorrentLoaded}" | grep 'udp://\|http://\|https://' | grep -v 'Magnet URI' | grep -v 'Comment' | sed -e 's/ //g;'); do
        if (grep -q 'udp://' <<<"${sAnnoncer}"); then
            [[ ${bAnnoncersUdp} -eq 1 ]] && nEnable=1 || nEnable=0
            ((nCountAnnoncers++))
            aAnnoncersUdp+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} ${nEnable}"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'ipv6' <<<"${sAnnoncer}"); then
            # ((nCountAnnoncers++))
            aAnnoncersIpv+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 0"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'http://' <<<"${sAnnoncer}"); then
            ((nCountAnnoncers++))
            aAnnoncersHttp+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 1"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        elif (grep -q 'https://' <<<"${sAnnoncer}"); then
            ((nCountAnnoncers++))
            aAnnoncersHttps+=("${sAnnoncer}")
            aAnnoncers[${nId}]="t${nId} 1"
            echo "${sAnnoncer}" >>"${sLogFile}"
            ((nId++))
            continue
        else
            ((nId++))
        fi
    done
    {
        echo "There is ${nCountAnnoncers} annoncer(s) in ${sTorrentLoaded}"
        echo "UDP: ${#aAnnoncersUdp[*]}"
        echo "IPv6: ${#aAnnoncersIpv[*]}"
        echo "HTTP: ${#aAnnoncersHttp[*]}"
        echo "HTTPs: ${#aAnnoncersHttps[*]}"
        echo "--------------"
    } >>"${sLogFile}"
    if [ "${nCountAnnoncers}" -eq 0 ]; then
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.close ${sInfoHash} >>"${sLogFile}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.erase ${sInfoHash} >>"${sLogFile}"
        nContinue=0
    fi

    #### Step 6 - Disable IPv6 annoncers
    if [[ ${nContinue} -eq 1 ]]; then
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep6}"
        bCleaned=0
        for ((i = 0; i < ${#aAnnoncers[@]}; i++)); do
            nId="$(echo "${aAnnoncers[${i}]}" | awk '{printf $1}')"
            bState="$(echo "${aAnnoncers[${i}]}" | awk '{printf $2}')"
            if [ "${bState}" -eq 0 ]; then
                xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} t.is_enabled.set ${sInfoHash}:${nId} ${bState} >>"${sLogFile}"
                bCleaned=1
            else
                [[ ${bAnnoncersCheck} -eq 1 ]] && mysql ${sSqlParams} -e "INSERT INTO annoncers (scgi_port,info_hash,id,user) VALUES ('${nCgiPort}', '${sInfoHash}', '${nId}', '${sUserName}');" -v
            fi
        done
        if [ ${bCleaned} -eq 1 ]; then
            {
                echo "Cleaning annoncers completed !"
                echo "--------------"
            } >>"${sLogFile}"
        fi
    fi

    #### Step 7 - Prepare annoncers (UDP, HTTP & HTTPs) list for GetTrackersCert.bsh script
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep7}"
    if [[ ${nContinue} -eq 1 ]] && [[ ${bAnnoncersCheck} -eq 1 ]]; then
        bExecute=0
        sTempLocalFile="$(mktemp)"
        for sAnnoncer in "${aAnnoncersHttps[@]}"; do
            if [ -n "${sAnnoncer}" ]; then
                sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                [ -z "${sProto}" ] && sProto="https://"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sProto},,g)
                sUrlUser="$(echo "${sAnnoncer}" | grep @ | cut -d@ -f1)"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sUrlUser}@,,g | cut -d/ -f1)
                if (! grep -q "${sAnnoncer}" <<<${sTempLocalFile}); then
                    echo "${sAnnoncer}|${sPrivacy}" >>${sTempLocalFile}
                    bExecute=1
                    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep7} (${sAnnoncer})"
                fi
            fi
        done
        for sAnnoncer in "${aAnnoncersHttp[@]}"; do
            if [ -n "${sAnnoncer}" ]; then
                sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                [ -z "${sProto}" ] && sProto="http://"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sProto},,g)
                sUrlUser="$(echo "${sAnnoncer}" | grep @ | cut -d@ -f1)"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sUrlUser}@,,g | cut -d/ -f1)
                if (! grep -q "${sAnnoncer}" <<<${sTempLocalFile}); then
                    echo "${sAnnoncer}|${sPrivacy}" >>${sTempLocalFile}
                    bExecute=1
                    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} t.is_enabled.set ${sInfoHash}:${nId} ${bState} >>"${sLogFile}"
                    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep7} (${sAnnoncer})"
                fi
            fi
        done
        for sAnnoncer in "${aAnnoncersUdp[@]}"; do
            if [ -n "${sAnnoncer}" ]; then
                sProto="$(echo "${sAnnoncer}" | grep '://' | sed -e's,^\(.*://\).*,\1,g')"
                [ -z "${sProto}" ] && sProto="udp://"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sProto},,g)
                sUrlUser="$(echo "${sAnnoncer}" | grep @ | cut -d@ -f1)"
                sAnnoncer=$(echo "${sAnnoncer}" | sed -e s,${sUrlUser}@,,g | cut -d/ -f1)
                if (! grep -q "${sAnnoncer}" <<<${sTempLocalFile}); then
                    echo "${sAnnoncer}|${sPrivacy}|${sInfoHash}" >>${sTempLocalFile}
                    bExecute=1
                    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep7} (${sAnnoncer})"
                fi
            fi
        done
        sort ${sTempLocalFile} | uniq -u >>"/home/.check_annoncers_${sUserName}"
        rm -f ${sTempLocalFile}

        # Execute annoncers check if needed
        if [ -s "/home/.check_annoncers_${sUserName}" ] && [ ! -f "/home/.check_annoncers_${sUserName}.lock" ] && [[ ${bExecute} -eq 1 ]]; then
            sudo /bin/bash "<MySB_InstallDir>/scripts/GetTrackersCert.bsh" USER "${sUserName}" &
        fi
        # [[ ${bExecute} -eq 1 ]] && sudo /bin/bash "<MySB_InstallDir>/scripts/GetTrackersCert.bsh" USER "${sUserName}" &
    fi

    #### Step 8 - Check if torrent already exist & copying duplicated files
    xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep8}"
    if [[ ${nContinue} -eq 1 ]] && [[ ${sFilesRecycling} -gt 0 ]]; then
        for sTree in $(mysql ${sSqlParams} -e "SELECT tree FROM torrents WHERE info_hash='${sInfoHash}' AND name='${sName}' AND state='completed';"); do
            if [ -n "${sTree}" ]; then
                if [ -f "${sTree}" ] || [ -d "${sTree}" ]; then
                    # Tree in DB is the same that real
                    fnCopyFile >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                    break
                else
                    {
                        # Not a validated file/directory, removing entry from database !
                        echo "Not a validated file/directory, removing entry from database !"
                        mysql ${sSqlParams} -e "DELETE FROM torrents WHERE info_hash='${sInfoHash}' AND name='${sName}' AND state='completed' AND tree='${sTree}';" -v
                    } >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                fi
            else
                # We search the file with find
                sTree="$(find /home/*/rtorrent/ -name "${sName}" -print -quit)"
                if [ -n "${sTree}" ]; then
                    fnCopyFile >>"${sLogFile}"
                    sed -i '/^$/d' "${sLogFile}"
                fi
            fi
        done
    fi

    if [[ ${nContinue} -eq 1 ]]; then
        #### Step 9 - Copy back torrent loaded & start it
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep9}"
        {
            if [ "${sTorrentLoaded}" != "${sTorrentFile}" ]; then
                echo -n "Moving torrent: "
                (! mv -fv "${sTorrentLoaded}" "${sTorrentFile}") && echo "'${sTorrentLoaded}' -> '${sTorrentFile}'"
            fi
        } >>"${sLogFile}"
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.open ${sInfoHash} >>"${sLogFile}"
        [[ ${bAnnoncersCheck} -eq 0 ]] && xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.start ${sInfoHash} >>"${sLogFile}"
        [[ ${bAnnoncersCheck} -eq 0 ]] && xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.save_full_session ${sInfoHash} >>"${sLogFile}"

        #### Step 10 - Quota update
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sStep10}"
        sudo /bin/bash /home/"${sUserName}"/.rTorrent_tasks.sh 'quota'
        xmlrpc2scgi.py -p scgi://localhost:${nCgiPort} d.custom2.set ${sInfoHash} "${sTorrentDir}"
    fi
fi

#### On error OR torrent refused
if [[ ${nContinue} -eq 0 ]]; then
    #### Remove refused torrent file
    [ -n "${sTorrentFile}" ] && rm -fv "${sTorrentFile}" >>"${sLogFile}"
    #### Remove torrent from list
    {
        [ -n "${nCgiPort}" ]
        [ -n "${sInfoHash}" ]
    } && sudo /bin/bash /home/"${sUserName}"/.rTorrent_tasks.sh 'erase' ${nCgiPort} ${sInfoHash} &
    #### Send mail to user
    curl --retry 3 --silent --show-error --data "username=${sUserName}&get_name=${sName}&get_loaded_file=${sTorrentLoaded}&privacy=${sPrivacy}&trackermodeallowed=${sTrackerModeAllowed}" http://localhost:8888/rTorrent >>"${sLogFile}"
fi
cat "${sLogFile}" >>"/home/${sUserName}/logs/$(basename "$0").log"
rm -f "${sLogFile}"

##################### LAST LINE ######################################
