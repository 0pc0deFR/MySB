#!/bin/bash
# rev 2.0
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

### BEGIN INIT INFO
# Provides:		  rtorrent-<username>
# Required-Start:	$local_fs $network $syslog $named $mysql
# Required-Stop:	 $local_fs $network $syslog $named
# Default-Start:	 2 3 4 5
# Default-Stop:	  0 1 6
# Short-Description: Start/stop rtorrent-<username> daemon
# Description:	   Start/stop rtorrent-<username> daemon.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

#### Includes
# shellcheck source=.etc/MySB/config
source /etc/MySB/config || exit 0
# shellcheck source=inc/vars
source "${MySB_InstallDir}"/inc/vars || exit 0
# shellcheck source=/dev/null
source /lib/lsb/init-functions || exit 0

######################################################################
#
# S T A R T   C U S T O M I Z A T I O N S
#
######################################################################

#------------------------------------------------------------
# rTorrent Infos
#------------------------------------------------------------
gsUsername="<username>"                       # Username to run rtorrent under
gsHomeDir="/home/${gsUsername}"               # User home dir
gsSessionDir="${gsHomeDir}/rtorrent/.session" # rTorrent session directory
gsPidFile="${gsSessionDir}/${gsUsername}.pid" # PID file
gsBinName="rtorrent-${gsUsername}"
gsBinDesc="rTorrent for ${gsUsername}"
#------------------------------------------------------------
# Binary
#------------------------------------------------------------
# rTorrent bin
sRequest="$(cmdMySQL 'MySB_db' "SELECT rtorrent_version,proxy_port,scgi_port,rtorrent_port FROM users WHERE users_ident='${gsUsername}';" | sed 's/\t/|/g;')"
rTorrentVersion="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[1]}')"
nProxyPort="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[2]}')"
nPortCgi="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[3]}')"
nPortRtorrent="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[4]}')"
bActiveUdp="$(cmdMySQL 'MySB_db' "SELECT annoncers_udp FROM system WHERE id_system='1';")"
nUid=$(id "${gsUsername}" -u)
bGuid=$(id "${gsUsername}" -g)
bGuidMysbUsers=$(grep mysb_users /etc/group | awk -F: '{ print $3 }')
#------------------------------------------------------------
# Log
#------------------------------------------------------------
gsLogFile="${gsHomeDir}/logs/rTorrentInit.log"

######################################################################
#
# E N D   C U S T O M I Z A T I O N S
#
######################################################################

######################################################################
#
# S T A R T   W O R K S P A C E
#
######################################################################

#------------------------------------------------------------
# Functions - Begin
#------------------------------------------------------------

## Delete PID file and rtorrent.lock
gfnDeletePidFile() {
    (rm -vf "${gsPidFile}" >>"${gsLogFile}") && echo "Delete rTorrent PID file: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
}

## mount share dir for seedbox users
gfnMountShareDir() {
    local sMountList
    sMountList="$(mount -l 2>/dev/null | grep "${gsHomeDir}/share")"

    case "$1" in
        'mount')
            if [ -z "${sMountList}" ]; then
                umount "${gsHomeDir}"/share >/dev/null 2>&1
                mount --bind /home/MySB_share "${gsHomeDir}"/share 2>>"${gsLogFile}"
            fi
            ;;
        'umount')
            if [ -n "${sMountList}" ]; then
                umount "${gsHomeDir}"/share 2>>"${gsLogFile}"
            fi
            ;;
    esac
}

## mount torrents dir for seedbox users
gfnMountTorrentsDir() {
    local sMountList
    sMountList="$(mount -l 2>/dev/null | grep "${gsHomeDir}/rtorrent/torrents")"

    case "$1" in
        'mount')
            if [ -z "${sMountList}" ] && [ -d "${gsRutorrentDir}"/share/users/"${gsUsername}"/torrents ]; then
                umount "${gsHomeDir}"/rtorrent/torrents >/dev/null 2>&1
                mount --bind "${gsRutorrentDir}"/share/users/"${gsUsername}"/torrents "${gsHomeDir}"/rtorrent/torrents 2>>"${gsLogFile}"
            fi
            ;;
        'umount')
            if [ -n "${sMountList}" ]; then
                umount "${gsHomeDir}"/rtorrent/torrents 2>>"${gsLogFile}"
            fi
            ;;
    esac
}

## Add/Remove cronjob
gfnDoCrontab() {
    if [ -n "${1}" ]; then
        crontab -l >/tmp/crontab.tmp
        sed -i "/${gsUsername}/d" /tmp/crontab.tmp
        case "${1}" in
            'add') echo "*/5 * * * * /bin/bash /home/${gsUsername}/.rTorrent_tasks.sh status" | tee -a /tmp/crontab.tmp ;;
        esac
        crontab /tmp/crontab.tmp
        rm -f /tmp/crontab.tmp
    fi
}

#
# Function that starts the daemon/service
#
gfnDoStart() {
    # Mount
    gfnMountShareDir 'mount'
    gfnMountTorrentsDir 'mount'

    # Add crontab
    gfnDoCrontab 'add'

    # Remove all temp files
    rm -f "/tmp/GetTrackersCert.bsh.${gsUsername}".*
    : >"/home/${gsUsername}/.check_annoncers"

    # Kill all processes
    for pid in $(pgrep "GetTrackersCert.bsh USER \"${gsUsername}\"" | grep -v 'grep' | awk '{ print $2; }'); do kill -9 "${pid}"; done

    # Remove all TCP socket
    [ -n "${nPortCgi}" ] && fuser -k "${nPortCgi}"/tcp >/dev/null

    # Create config file
    # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
    source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_MySB_CreateUser
    gfnCreateRtorrentConfigFile "${gsUsername}"
    # ruTorrent Plugin Spacedisk quotas included
    gfnPluginDiskspaceQuotaIncluded "${gsUsername}"

    # Delete ghost pid and lock file
    gfnDeletePidFile

    # Composerize
    cd "${MySB_InstallDir}"/docker || exit 1
    rm -f docker-compose.yml
    rm -f "${MySB_InstallDir}/docker/${gsBinName}.yml"
    gfnGetRepoValues 'rtorrent'
    aCompose=("docker" "run" "--env USERNAME=${gsUsername}" "--env PUID=${nUid}" "--env PGID=${bGuid}" "--env PGID_mysb_users=${bGuidMysbUsers}")
    aCompose+=("--env PORT_CGI=${nPortCgi}" "--env PORT_RTORRENT=${nPortRtorrent}" "--env USE_UDP=${bActiveUdp}" "--env RTORRENT_VERSION=${rTorrentVersion}")
    aCompose+=("--env PORT_MYSB_HTTPS=${gsPort_NginX_HTTPS}" "--env HOSTNAME=${gsHostNameFqdn}")
    aCompose+=("-p ${nProxyPort}:8080/tcp" "-p ${nPortCgi}:${nPortCgi}/tcp" "-p ${nPortRtorrent}:${nPortRtorrent}/tcp")
    [[ ${bActiveUdp} -eq 1 ]] && aCompose+=("-p ${nPortRtorrent}:${nPortRtorrent}/udp")
    aCompose+=("-v /home:/home")
    aCompose+=("-v /etc/localtime:/etc/localtime:ro" "-v /etc/timezone:/etc/timezone:ro" "-v /home/.config.cnf:/home/.config.cnf:ro")
    aCompose+=("-v /var/run/mysqld/mysqld.sock:/var/run/mysqld/mysqld.sock")
    aCompose+=("-v ${gsRutorrentDir}/conf:/var/www/html/ru/conf")
    aCompose+=("-v ${gsRutorrentDir}/share:/var/www/html/ru/share")
    aCompose+=("--restart unless-stopped" "--name ${gsBinName}" "--network frontend")
    aCompose+=("registry.gitlab.com/toulousain79/mysb_images/rtorrent/rutorrent_rtorrent:${gsRepoVersion}")

    composerize "${aCompose[@]}" >"${MySB_InstallDir}/docker/${gsBinName}.yml"
    if [ -f "${MySB_InstallDir}/docker/${gsBinName}.yml" ]; then
        sed -i 's/3.3/3.7/g;' "${MySB_InstallDir}/docker/${gsBinName}.yml"
        docker-compose -f "${MySB_InstallDir}/docker/${gsBinName}.yml" up -d && return 0 || return 1
    else
        return 1
    fi
}

#
# Function that stops the daemon/service
#
gfnDoStop() {
    # Unmout
    gfnMountShareDir 'umount'
    gfnMountTorrentsDir 'umount'

    if [ -f "${MySB_InstallDir}/docker/${gsBinName}.yml" ]; then
        docker-compose -f "${MySB_InstallDir}/docker/${gsBinName}.yml" down && return 0 || return 1
    else
        return 1
    fi
}

#
# Function that sends a SIGHUP to the daemon/service
#
gfnDoReload() {
    echo "RELOAD: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"

    if (type -P supervisorctl &>/dev/null); then
        supervisorctl -s unix:///home/${gsUsername}/supervisor.sock -u ${gsUsername} -p 123 restart rtorrent &>/dev/null
        return $?
    else
        return 1
    fi
}

#
# Function stop case
#
gfnRestartStopCase() {
    gfnDoStart
    case $? in
        0)
            echo "RESTART: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
            cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='${gsUsername}';"
            log_end_msg 0
            ;;
        *) # Failed to start
            echo "Could not be restarted: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
            gfnDeletePidFile
            log_end_msg 1
            ;;
    esac
}

#------------------------------------------------------------
# Functions - End
#------------------------------------------------------------

######################################################################
#
# E N D   W O R K S P A C E
#
######################################################################

######################################################################
#
# S T A R T   C O M M A N D   L I N E   M O D E
#
######################################################################

## Check if user exist
if [ -z "$(getent passwd "${gsUsername}")" ]; then
    echo "User ${gsUsername} does not exist !"
    exit 0
fi

## Create log file
if ! [ -e "${gsLogFile}" ]; then
    touch "${gsLogFile}"
fi

## Sync DB
if [ ! -f "${gsHomeDir}"/db/"${gsUsername}".sq3 ]; then
    cp "${MySB_InstallDir}/db/Sync.tmpl.sq3" "${gsHomeDir}"/db/"${gsUsername}".sq3
    chmod -R 0770 "${gsHomeDir}"/db
    chown -R "${FnUser}":www-data "${gsHomeDir}"/db
fi

## Options
case "$1" in
    'start')
        log_daemon_msg "Starting ${gsBinDesc}" "${gsBinName}"
        gfnDoStart
        case $? in
            0)
                echo "START: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
                cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='${gsUsername}';"
                log_end_msg 0
                ;;
            *)
                echo "Could not be started: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
                gfnDeletePidFile
                log_end_msg 1
                ;;
        esac
        ;;
    'stop')
        log_daemon_msg "Stopping ${gsBinDesc}" "${gsBinName}"
        gfnDoCrontab 'remove'
        gfnDoStop
        case $? in
            0)
                echo "STOP: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
                log_end_msg 0
                ;;
            *)
                echo "Could not be stopped, the process was killed: $(/bin/date '+%Y-%m-%d - %H:%M:%S')" >>"${gsLogFile}"
                log_end_msg 1
                ;;
        esac
        ;;
    'restart')
        log_daemon_msg "Restarting ${gsBinDesc}" "${gsBinName}"
        gfnDoStop
        case $? in
            0) gfnRestartStopCase ;;
            *)
                gfnDoStop
                gfnRestartStopCase
                ;;
        esac
        ;;
    'reload')
        log_daemon_msg "Reloading ${gsBinDesc} configuration" "${gsBinName}"
        gfnDoReload
        log_end_msg $?
        ;;
    'status')
        supervisorctl -s unix:///home/${gsUsername}/supervisor.sock -u ${gsUsername} -p 123 status rtorrent &>/dev/null && exit 0 || exit $?
        ;;
    *)
        echo "Usage: service ${gsBinName} {start|stop|restart|reload|status}"
        exit 3
        ;;
esac

######################################################################
#
# E N D   C O M M A N D   L I N E   M O D E
#
######################################################################

exit 0

##################### LAST LINE ######################################
