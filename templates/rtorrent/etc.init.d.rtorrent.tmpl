#!/bin/bash
# rev 2.2
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

### BEGIN INIT INFO
# Provides:		  rtorrent-<username>
# Required-Start:	$local_fs $network $syslog $named $mysql
# Required-Stop:	 $local_fs $network $syslog $named
# Default-Start:	 2 3 4 5
# Default-Stop:	  0 1 6
# Short-Description: Start/stop rtorrent-<username> daemon
# Description:	   Start/stop rtorrent-<username> daemon.
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

#### Includes
# shellcheck source=.etc/MySB/config
source /etc/MySB/config || exit 0
# shellcheck source=inc/vars
source "${MySB_InstallDir}"/inc/vars || exit 0
# shellcheck source=/dev/null
source /lib/lsb/init-functions || exit 0

######################################################################
#
# S T A R T   C U S T O M I Z A T I O N S
#
######################################################################

#------------------------------------------------------------
# rTorrent Infos
#------------------------------------------------------------
gsUsername="<username>"                                  # Username to run rtorrent under
gsHomeDir="/home/${gsUsername}"                          # User home dir
gsSessionDir="${gsHomeDir}/rtorrent/.session"            # rTorrent session directory
gsPidScreen="/run/rtorrent/${gsUsername}_screen.pid"     # PID file for screen session
gsPidRtorrent="/run/rtorrent/${gsUsername}_rtorrent.pid" # PID file for rtorrent
gsPidInotify="/run/rtorrent/${gsUsername}_inotify.pid"   # PID file for inotify
gsSockFile="/run/rtorrent/${gsUsername}.sock"            # Sock file
gsLockFile="${gsSessionDir}/rtorrent.lock"               # Lock file
gsBinRtorrent="rtorrent-${gsUsername}"
gsBinRtorrentDesc="rTorrent for ${gsUsername}"
gsInotifyScript=".rTorrent_inotify.sh"
gsParam="${1}"
#------------------------------------------------------------
# Binary
#------------------------------------------------------------
# rTorrent bin
sRequest="$(cmdMySQL 'MySB_db' "SELECT rtorrent_version,scgi_port FROM users WHERE users_ident='${gsUsername}';" | sed 's/\t/|/g;')"
rTorrentVersion="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[1]}')"
sCgiPort="$(echo "${sRequest}" | awk '{split($0,a,"|"); print a[2]}')"
case "${rTorrentVersion}" in
    "v0.9.7") binRtorrent="/usr/bin/rtorrent" ;;
    "v0.9.8") binRtorrent="/usr/local/bin/rtorrent" ;;
    *) binRtorrent="/usr/bin/rtorrent" ;;
esac
binScreen="/usr/bin/screen" # Screen binary
#------------------------------------------------------------
# Log
#------------------------------------------------------------
gsLogFile="${gsHomeDir}/logs/rTorrentInit.log"
gbDisplay=0
for sArg in "$@"; do
    case "${sArg}" in
        'debug' | 'verbose')
            gbDisplay=1
            ;;
    esac
done
export gsLogFile gbDisplay

######################################################################
#
# E N D   C U S T O M I Z A T I O N S
#
######################################################################

######################################################################
#
# S T A R T   W O R K S P A C E
#
######################################################################

#------------------------------------------------------------
# Functions - Begin
#------------------------------------------------------------

## Create PID file for rTorrent
gfnRtorrentCreatePidFile() {
    sleep 1
    if [[ -e "${gsLockFile}" ]]; then
        stitle "Create PID file"
        sed "s/[^0-9]//g" <"${gsLockFile}" >"${gsPidRtorrent}"
        if [[ -e "${gsPidRtorrent}" ]]; then
            smessage_ok "PID: $(cat "${gsPidRtorrent}")"
        else
            smessage_ko "PID file not created"
        fi
    fi
}

## Delete PID file and rtorrent.lock
gfnCleanAll() {
    ssubtitle "Clean all files"

    smessage_infos "$(rm -vf "${gsLockFile}")"
    smessage_infos "$(rm -vf "${gsPidScreen}")"
    smessage_infos "$(rm -vf "${gsPidRtorrent}")"
    smessage_infos "$(rm -vf "${gsSockFile}")"

    smultiheaders "$(
        # Remove all temp files
        rm -fv "/tmp/GetTrackersCert.bsh.${gsUsername}".*
        : >"/home/.check_annoncers_${gsUsername}"

        # Kill all processes
        for sPid in $(pgrep -U "${gsUsername}" rtorrent); do
            kill -9 "${sPid}"
        done
        for sPid in $(pgrep -U "${gsUsername}" screen); do
            kill -9 "${sPid}"
        done

        # Remove all TCP socket
        [[ -n "${sCgiPort}" ]] && fuser -k "${sCgiPort}"/tcp >/dev/null
    )"
}

## mount share dir for seedbox users
gfnMountShareDir() {
    local sMountList
    sMountList="$(grep "${gsHomeDir}/share" < <(mount -l 2>/dev/null))"

    case "${1}" in
        'mount')
            if [[ -z "${sMountList}" ]] && [[ -d /home/MySB_share ]] && [[ -d "${gsHomeDir}"/share ]]; then
                ssubtitle "Mount /home/MySB_share to ${gsHomeDir}/share"
                smessage_infos "$(mount -v --bind /home/MySB_share "${gsHomeDir}"/share)"
                if (grep -q "${gsHomeDir}/share" < <(mount -l 2>/dev/null)); then
                    smessage_ok "done"
                else
                    smessage_ko "failed"
                fi
            fi
            ;;
        'umount')
            if [[ -n "${sMountList}" ]]; then
                ssubtitle "Umount ${gsHomeDir}/share"
                smessage_infos "$(umount -v "${gsHomeDir}"/share)"
                if (! grep -q "${gsHomeDir}/share" < <(mount -l 2>/dev/null)); then
                    smessage_ok "done"
                else
                    smessage_ko "failed"
                fi
            fi
            ;;
    esac
}

## mount torrents dir for seedbox users
gfnMountTorrentsDir() {
    local sMountList
    sMountList="$(grep "${gsRutorrentDir}/share/users/${gsUsername}/torrents" < <(mount -l 2>/dev/null))"

    case "${1}" in
        'mount')
            if [[ -z "${sMountList}" ]] && [[ -d "${gsRutorrentDir}"/share/users/"${gsUsername}"/torrents ]] && [[ -d "${gsHomeDir}"/rtorrent/torrents ]]; then
                ssubtitle "Mount ${gsRutorrentDir}/share/users/${gsUsername}/torrents to ${gsHomeDir}/rtorrent/torrents"
                smessage_infos "$(mount -v --bind "${gsHomeDir}"/rtorrent/torrents "${gsRutorrentDir}"/share/users/"${gsUsername}"/torrents)"
                if (grep -q "${gsRutorrentDir}/share/users/${gsUsername}/torrents" < <(mount -l 2>/dev/null)); then
                    smessage_ok "done"
                else
                    smessage_ko "failed"
                fi
            fi
            ;;
        'umount')
            if [[ -n "${sMountList}" ]]; then
                ssubtitle "Umount umount -v ${gsRutorrentDir}/share/users/${gsUsername}/torrents"
                smessage_infos "$(umount -v "${gsRutorrentDir}/share/users/${gsUsername}/torrents")"
                if (! grep -q "${gsRutorrentDir}/share/users/${gsUsername}/torrents" < <(mount -l 2>/dev/null)); then
                    smessage_ok "done"
                else
                    smessage_ko "failed"
                fi
            fi
            ;;
    esac
}

## Add/Remove cronjob
gfnDoCrontab() {
    local sToDo sCronjob
    sToDo="${1}"

    if [[ -n "${sToDo}" ]]; then
        ssubtitle "${sToDo} Crontab"
        crontab -l >/tmp/crontab.tmp
        sed -i "/${gsUsername}/d" /tmp/crontab.tmp
        case "${sToDo}" in
            'Add')
                sCronjob="*/5 * * * * /bin/bash /home/${gsUsername}/.rTorrent_tasks.sh status"
                smessage_infos "${sCronjob}"
                echo "${sCronjob}" >>/tmp/crontab.tmp
                ;;
        esac
        crontab /tmp/crontab.tmp
        rm -f /tmp/crontab.tmp
    fi
}

#
# Function that starts the daemon/service
#
gfnInotifyStart() {
    local nReturn
    nReturn=0
    ssubtitle "Start Inotify"

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --background --make-pidfile --test \
        --pidfile "${gsPidInotify}" \
        --chuid "${gsUsername}" \
        --exec ${binScreen} \
        -- -DmUS inotify_"${gsUsername}" /bin/bash /home/"${gsUsername}"/"${gsInotifyScript}" \
        2>>"${gsLogFile}" || nReturn=1

    start-stop-daemon --start --quiet --background --make-pidfile \
        --pidfile "${gsPidInotify}" \
        --chuid "${gsUsername}" \
        --exec ${binScreen} \
        -- -DmUS inotify_"${gsUsername}" /bin/bash /home/"${gsUsername}"/"${gsInotifyScript}" \
        2>>"${gsLogFile}" || nReturn=2

    case "${nReturn}" in
        0)
            smessage_ok "done"
            ;;
        1) # Old process is still running
            smessage_nok "done"
            ;;
        *) # Failed to start
            smessage_ko "failed"
            ;;
    esac

    return ${nReturn}
}

gfnInotifyStop() {
    local sTitleSelect nReturn
    sTitleSelect="${1}"
    [[ -z ${sTitleSelect} ]] && sTitleSelect="stitle"

    eval "$(${sTitleSelect} "Stop Inotify (${gsParam})")"

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    if (start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --remove-pidfile --pidfile "${gsPidInotify}" --exec ${binScreen} 2>>"${gsLogFile}"); then
        nReturn=$?
        smessage_ok "done"
    else
        if [[ ! -f "${gsPidInotify}" ]]; then
            nReturn=0
            smessage_ok "done"
        elif (pidofproc -p "${gsPidInotify}" ${binScreen} >/dev/null); then
            nReturn=1
            smessage_ko "failed"
        else
            nReturn=1
            smessage_ko "failed"
        fi
    fi
    return ${nReturn}
}

gfnRtorrentStart() {
    local bReturn
    bReturn=0

    stitle "Start ${gsBinRtorrentDesc} (${gsParam})"

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --background --make-pidfile --test \
        --pidfile "${gsPidScreen}" \
        --chuid "${gsUsername}" \
        --exec ${binScreen} \
        -- -DmUS ${gsBinRtorrent} ${binRtorrent} \
        2>>"${gsLogFile}"
    bReturn=$?

    if [[ ${bReturn} -eq 0 ]]; then
        # force stop
        gfnRtorrentStop "ssubtitle"
        gfnInotifyStop "ssubtitle"

        # Clean all
        gfnCleanAll

        # Mount
        gfnMountShareDir 'mount'
        gfnMountTorrentsDir 'mount'

        # Add crontab
        gfnDoCrontab 'Add'

        # Create config file
        # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
        source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_MySB_CreateUser
        gfnCreateRtorrentConfigFile "${gsUsername}"
        # ruTorrent Plugin Spacedisk quotas included
        gfnPluginDiskspaceQuotaIncluded "${gsUsername}"

        start-stop-daemon --start --quiet --background --make-pidfile \
            --pidfile "${gsPidScreen}" \
            --chuid "${gsUsername}" \
            --exec ${binScreen} \
            -- -DmUS ${gsBinRtorrent} ${binRtorrent} \
            2>>"${gsLogFile}"
        bReturn=$?
    fi

    return ${bReturn}
}

#
# Function that stops the daemon/service
#
gfnRtorrentStop() {
    local sTitleSelect nReturn
    sTitleSelect="${1}"
    [[ -z ${sTitleSelect} ]] && sTitleSelect="stitle"

    eval "$(${sTitleSelect} "Stop ${gsBinRtorrentDesc} (${gsParam})")"

    # Unmout
    gfnMountShareDir 'umount'
    gfnMountTorrentsDir 'umount'

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "${gsPidScreen}" --exec ${binScreen} 2>>"${gsLogFile}"
    nReturn=$?

    # clean all
    [[ -z ${sTitleSelect} ]] && gfnCleanAll

    return ${nReturn}
}

#
# Function that sends a SIGHUP to the daemon/service
#
gfnDoReload() {
    local nReturn

    stitle "Reload ${gsBinRtorrentDesc}"

    # Create config file
    # shellcheck source=inc/funcs_by_script/funcs_MySB_CreateUser
    source "${MySB_InstallDir}"/inc/funcs_by_script/funcs_MySB_CreateUser
    gfnCreateRtorrentConfigFile "${gsUsername}"
    # ruTorrent Plugin Spacedisk quotas included
    gfnPluginDiskspaceQuotaIncluded "${gsUsername}"

    if (start-stop-daemon --stop --signal HUP --quiet --pidfile "${gsPidScreen}" --exec ${binScreen} 2>>"${gsLogFile}"); then
        nReturn=$?
        smessage_ok "done"
    else
        if (pidofproc -p "${gsPidScreen}" ${binScreen} >/dev/null); then
            nReturn=$?
            smessage_nok "done"
        else
            nReturn=1
            smessage_ko "failed"
        fi
    fi
    return ${nReturn}
}

#
# Function stop case
#
gfnRestartStopCase() {
    gfnRtorrentStart
    case "$?" in
        0)
            ssubtitle "${gsBinRtorrentDesc} restarted"
            gfnRtorrentCreatePidFile
            cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='${gsUsername}';"
            [[ ${gbDisplay} -eq 0 ]] && log_end_msg 0
            ;;
        1) # Old process is still running
            ssubtitle "${gsBinRtorrentDesc} could not be restarted, old process is still running"
            gfnRtorrentCreatePidFile
            [[ ${gbDisplay} -eq 0 ]] && log_end_msg 1
            ;;
        *) # Failed to start
            ssubtitle "${gsBinRtorrentDesc} could not be restarted"
            gfnDoCrontab 'Remove'
            gfnCleanAll
            [[ ${gbDisplay} -eq 0 ]] && log_end_msg 1
            ;;
    esac
}

#------------------------------------------------------------
# Functions - End
#------------------------------------------------------------

######################################################################
#
# E N D   W O R K S P A C E
#
######################################################################

######################################################################
#
# S T A R T   C O M M A N D   L I N E   M O D E
#
######################################################################

## Check if user exist
if [[ -z "$(getent passwd "${gsUsername}")" ]]; then
    smessage "User ${gsUsername} does not exist !"
    exit 0
fi

## Create log file
if [[ ! -e "${gsLogFile}" ]]; then
    touch "${gsLogFile}"
fi

## Sync DB
if [[ ! -f "${gsHomeDir}"/db/"${gsUsername}".sq3 ]]; then
    stitle "Copying ${MySB_InstallDir}/db/Sync.tmpl.sq3 to ${gsHomeDir}/db/${gsUsername}.sq3"
    smultiheaders < <(
        cp -v "${MySB_InstallDir}/db/Sync.tmpl.sq3" "${gsHomeDir}"/db/"${gsUsername}".sq3
        chmod -Rv 0770 "${gsHomeDir}"/db
        chown -Rv ${gsUsername}:www-data "${gsHomeDir}"/db
    )
fi

## /run/rtorrent
[[ ! -d /run/rtorrent ]] && install -o root -g mysb_users -m 0775 -d /run/rtorrent

## Options
case "${gsParam}" in
    'start')
        [[ ${gbDisplay} -eq 0 ]] && log_daemon_msg "Starting ${gsBinRtorrentDesc}" "${gsBinRtorrent}"
        gfnRtorrentStart
        case "$?" in
            0)
                ssubtitle "${gsBinRtorrentDesc} started"
                gfnRtorrentCreatePidFile
                cmdMySQL 'MySB_db' "UPDATE users SET rtorrent_restart='0' WHERE users_ident='${gsUsername}';"
                gfnInotifyStart
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 0
                ;;
            1)
                ssubtitle "${gsBinRtorrentDesc}  already running"
                gfnRtorrentCreatePidFile
                gfnInotifyStart
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 0
                ;;
            2)
                ssubtitle "${gsBinRtorrentDesc} could not be started"
                gfnRtorrentStop "ssubtitle"
                gfnDoCrontab 'Remove'
                gfnInotifyStop "ssubtitle"
                gfnCleanAll
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 1
                ;;
        esac
        ;;
    'stop')
        [[ ${gbDisplay} -eq 0 ]] && log_daemon_msg "Stopping ${gsBinRtorrentDesc}" "${gsBinRtorrent}"
        gfnRtorrentStop
        gfnDoCrontab 'Remove'
        case "$?" in
            0)
                ssubtitle "${gsBinRtorrentDesc} stopped"
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 0
                ;;
            1)
                ssubtitle "${gsBinRtorrentDesc} already stopped"
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 0
                ;;
            2)
                ssubtitle "${gsBinRtorrentDesc}  could not be stopped"
                [[ ${gbDisplay} -eq 0 ]] && log_end_msg 1
                ;;
        esac
        gfnInotifyStop
        ;;
    'restart')
        [[ ${gbDisplay} -eq 0 ]] && log_daemon_msg "Restarting ${gsBinRtorrentDesc}" "${gsBinRtorrent}"
        gfnInotifyStop "ssubtitle"
        gfnRtorrentStop "ssubtitle"
        gfnCleanAll
        case "$?" in
            0) gfnRestartStopCase ;;
            1)
                gfnRtorrentStop
                gfnRestartStopCase
                ;;
        esac
        ;;
    'reload')
        [[ ${gbDisplay} -eq 0 ]] && log_daemon_msg "Reloading ${gsBinRtorrentDesc} configuration" "${gsBinRtorrent}"
        gfnDoReload
        [[ ${gbDisplay} -eq 0 ]] && log_end_msg $?
        ;;
    'status')
        status_of_proc -p "${gsPidScreen}" "${binScreen}" "Screen for rTorrent"
        status_of_proc -p "${gsPidRtorrent}" "${binRtorrent}" "${gsBinRtorrent}"
        status_of_proc -p "${gsPidInotify}" "${binScreen}" "Screen for ${gsInotifyScript}"
        exit 0
        ;;
    *)
        echo "Usage: service rtorrent-${gsUsername} {start|stop|restart|reload|status}"
        exit 3
        ;;
esac

######################################################################
#
# E N D   C O M M A N D   L I N E   M O D E
#
######################################################################

exit 0

##################### LAST LINE ######################################
