#!/bin/bash
# rev 1.0

#### DO NOT MODIFY
UserName="$(whoami)"
ScriptName="$(basename "$0")"
DataBase="${HOME}/db/${UserName}.sq3"
FileLock="${HOME}/scripts/${ScriptName}.lock"
FileLog="${HOME}/logs/${ScriptName}.log"
RsyncCipher="aes128-ctr"
PID="$$"

## Destination
sRequestValues="$(sqlite3 -cmd '.timeout 150000' "${DataBase}" "SELECT mode_sync,dst_dir,dst_srv,dst_port,dst_user,dst_pass,MailObjectOK,MailObjectKO FROM ident WHERE ident_id = '1';")"
# ftp OR rsync
ModeSync="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[1]}')"
# Destination directory, WITH starting './' and WITHOUT ending '/'. (ex: ./home/myuser)
RemoteDir="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[2]}')"
# Hostname OR IP address of the destination. (ex: myserver.mydomain.com)
RemoteSrv="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[3]}')"
# Port (ex: 22)
RemotePort="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[4]}')"
# Username
RemoteUser="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[5]}')"
# Password
RemotePass="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[6]}')"
# Notification (if enabled on MySB options page in portal)
MailObjectOK="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[9]}')"
MailObjectKO="$(echo "${sRequestValues}" | awk '{split($0,a,"|"); print a[10]}')"
#### DO NOT MODIFY

#### START BY: CRON (without args) or DIRECTLY (with args after a download) ?
case "${1}" in
    'CRON' | 'DIRECT') CronMode=1 ;;
    *) CronMode=0 ;;
esac

#### LOCKED: If a lock file exists means that synchronization is already in progress. Same thing if the list is empty.
if [ -e "${FileLock}" ]; then # Check that the lock file has not been forgotten...
    nPid="$(cat "${FileLock}")"
    case "$(ps -p "${nPid}" &>/dev/null)" in
        0) exit 0 ;; # The script is still running, the lock file is legitimate. We can stop the script.
        *) # Otherwise, we remove it and continue running the script.
            echo $PID >"${FileLock}"
            ;;
    esac
else # No file locking, we continue.
    echo $PID >"${FileLock}"
fi

############ FUNCTIONs - BoF ############
#### Retrieving files to transfer
fnListing() {
    local sGetBasePath sGetCustom1 sGetName sMailObject sSubDirectory dStartDate dStartHour nPid sLocalSize sRemoteSize sDstDir sRemoteDestination nError

    # VARs
    nListId="${1}"
    sGetBasePath="${2}"
    sGetCustom1="${3}"
    sGetName="${4}"
    dStartDate="$(/bin/date +%Y/%m/%d)"
    dStartHour="$(/bin/date +%H:%M:%S)"
    sLocalSize=0
    sRemoteSize=1
    nError=0
    sMailObject="${MailObjectOK}"
    nPid="$(cat "${FileLock}")"

    # Check if files exist
    FnCheck="$(file "${sGetBasePath}")"
    # shellcheck disable=SC2181
    if [ $? -ne 0 ]; then
        ModeSync="no_such_file_or_directory"
    else
        Type="$(echo "${FnCheck}" | cut -d ":" -f 2 | sed 's/^ //g;s/\s+$//g;')"
    fi

    # Need to create a subdirectory on destination ?
    sDstDir="${RemoteDir%/}/${sGetCustom1}"
    if { [ -f "${sGetBasePath}" ] && [ "${CreateSubDir}" -eq 1 ]; } || { [ -d "${sGetBasePath}" ] && [ "${ModeSync}" == "ftp" ]; }; then
        sSubDirectory="${sGetBasePath##*/}"
        sSubDirectory="${sSubDirectory%.[^.]*}"
        sDstDir="${RemoteDir%/}/${sGetCustom1}/${sSubDirectory}"
    fi
    sDstDir="$(echo "${sDstDir}" | sed 's/^ //g;s/\s+$//g;')"
    sDstDir="$(echo "${sDstDir}" | sed "s/\[//g;s/\]//g;s/(//g;s/)//g;s/\ /./g;s/,/./g;s/'/./g;")"
    sRemoteDestination="$(echo "${sDstDir}/${sGetName}" | sed "s/\[//g;s/\]//g;s/(//g;s/)//g;s/\ /./g;s/,/./g;s/'/./g;")"

    # Check local file or directory size
    sLocalSize="$(du -hsb "${sGetBasePath}" | awk '{ print $1 }' | sed 's/,/./g;')"

    # Log
    echo "#### START ####"
    echo "Script:		$0"
    echo "From:		${sGetBasePath}"
    echo "To:		${sDstDir}"
    echo "Size:		${sLocalSize} (local)"
    echo "Category:	${sGetCustom1} (${CategoryList})"
    echo "User:		${RemoteUser}"
    echo "Server:		${RemoteSrv}"
    echo "Protocol:		${ModeSync}"
    echo "Date:		${dStartDate}"
    echo "Hour:		${dStartHour}"
    echo "--------------------"
    echo

    sqlite3 -cmd '.timeout 150000' "${DataBase}" "UPDATE list SET comments='Start: ${dStartDate} - ${dStartHour}', pid='${nPid}', size_local='${sLocalSize}', size_remote='0'  WHERE list_id = '${nListId}';"

    case "${ModeSync}" in
        'rsync')
            # Creating sub-directory on destination
            sshpass -p "${RemotePass}" ssh -p "${RemotePort}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${RemoteUser}@${RemoteSrv}" "mkdir -p \"${sDstDir}\"" 2>/dev/null

            # Start synchronization with RSYNC
            for ((i = 3; i >= 1; i -= 1)); do
                rsync -rtvyz --numeric-ids --partial --append --stats --timeout=10 -e "/usr/bin/sshpass -p${RemotePass} ssh -p ${RemotePort} -c ${RsyncCipher} -o Compression=yes -x -T -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" "${sGetBasePath}" "${RemoteUser}@${RemoteSrv}:${sDstDir}/"
                nError=$?
                # Check remote file or directory size
                sRemoteSize="$(sshpass -p "${RemotePass}" ssh -p "${RemotePort}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "${RemoteUser}"@"${RemoteSrv}" "du -hs \"${sRemoteDestination}\"" 2>/dev/null)"
                sRemoteSize="$(echo "${sRemoteSize}" | awk '{ print $1 }')"
                # if [ ${sLocalSize} -eq "${sRemoteSize}" ]; then
                # break
                # fi
            done
            ;;
        'ftp')
            LftpOptions="set ftp:ssl-protect-data true; set ssl:verify-certificate no; set net:max-retries 3; set net:reconnect-interval-base 5;"
            for ((i = 3; i >= 1; i -= 1)); do
                case "${Type}" in
                    'directory')
                        lftp -e "${LftpOptions} mkdir -p \"${sDstDir}\"; mirror -c -R \"${sGetBasePath}\" \"${sDstDir}\"; bye" -u "${RemoteUser}","${RemotePass}" "${RemoteSrv}" -p "${RemotePort}"
                        nError=$?
                        # Check remote size
                        sRemoteSize="$(lftp -e "${LftpOptions} du -hs \"${sRemoteDestination}\"; bye" -u "${RemoteUser}","${RemotePass}" "${RemoteSrv}" -p "${RemotePort}")"
                        ;;
                    *)
                        lftp -e "${LftpOptions} mkdir -p ${sDstDir}; put -c -O \"${sDstDir}\" \"${sGetBasePath}\"; bye" -u "${RemoteUser}","${RemotePass}" "${RemoteSrv}" -p "${RemotePort}"
                        nError=$?
                        # Check remote size
                        sRemoteSize="$(lftp -e "${LftpOptions} du -hs \"${sRemoteDestination}\"; bye" -u "${RemoteUser}","${RemotePass}" "${RemoteSrv}" -p "${RemotePort}")"
                        ;;
                esac
                sRemoteSize="$(echo "${sRemoteSize}" | awk '{ print $1 }')"
            done
            ;;
        'no_such_file_or_directory') echo "${FnCheck}" ;;
        *) return 1 ;;
    esac

    # Deleting the file from the list
    FnEndDate="$(/bin/date +%Y/%m/%d)"
    FnEndHour="$(/bin/date +%H:%M:%S)"
    if [ $nError -eq 0 ]; then
        # if [ ${sLocalSize} == ${sRemoteSize} ]; then
        sqlite3 -cmd '.timeout 150000' "${DataBase}" "UPDATE list SET is_active = '0', to_del = '1', pid = '', comments = 'End: ${FnEndDate} - ${FnEndHour}' WHERE list_id = '${nListId}';"
        # else
        # sqlite3 -cmd '.timeout 150000' "${DataBase}" "UPDATE list SET is_active = '1', to_del = '0', pid = '', comments = 'Local size: ${sLocalSize}, Remote size: ${sRemoteSize}' WHERE list_id = '${nListId}';"
        # fi
    else
        sqlite3 -cmd '.timeout 150000' "${DataBase}" "UPDATE list SET is_active = '0', pid = '', comments = 'Error: ${FnEndDate} - ${FnEndHour}' WHERE list_id = '${nListId}';"
        sMailObject="${MailObjectKO}"
    fi

    echo
    echo "--------------------"
    echo "Size:		${sRemoteSize} (remote)"
    echo "Date:		${FnEndDate}"
    echo "Hour:		${FnEndHour}"
    echo "##### END #####"

    # E-mail notification
    curl --data "type=synchro&username=${UserName}&get_base_path=${get_base_path}&get_directory=${get_directory}&get_custom1=${get_custom1}&get_name=${get_name}&get_loaded_file=${get_loaded_file}&subject=${sMailObject}&content=${FileLogTemp}" http://localhost:8888/rTorrent
}
############ FUNCTIONs - BoF ############
