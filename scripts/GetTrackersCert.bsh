#!/bin/bash
# ----------------------------------
# shellcheck source=inc/includes_before
source "$(dirname "$0")"/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################

#### Create dir
if [ ! -d ${MySB_InstallDir}/ssl/trackers/ ]; then
    mkdir ${MySB_InstallDir}/ssl/trackers/
fi

case "${gsSwitch}" in
    'APPLYCONFIG')
        DoDeleteTracker=1
        DoRenewCertificates=0
        DoCleanCertificates=1
        DoCheckAddedTorrents=0
        ;;
    'CRON')
        DoDeleteTracker=0
        DoRenewCertificates=1
        DoCleanCertificates=1
        DoCheckAddedTorrents=0
        ;;
    'USER')
        DoDeleteTracker=0
        DoRenewCertificates=0
        DoCleanCertificates=0
        DoCheckAddedTorrents=1
        ;;
    *) # "REFRESH" or "INSTALL"
        DoDeleteTracker=0
        DoRenewCertificates=1
        DoCleanCertificates=1
        DoCheckAddedTorrents=0
        ;;
esac

#### Removing deleted trackers from the portal
if [ $DoDeleteTracker -eq 1 ]; then
    RemovedTrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker_domain FROM trackers_list WHERE to_delete = '1';")"
    for RemovedTracker in $RemovedTrackersList; do
        log_daemon_msg "$RemoveOfTracker $RemovedTracker"
        rm -f ${MySB_InstallDir}/ssl/trackers/*$RemovedTracker.pem
        cmdMySQL 'MySB_db' "DELETE FROM trackers_list WHERE tracker_domain='$RemovedTracker';"
        gfnStatusLSB
    done
fi

#### Renew expirated certificates
if [ $DoRenewCertificates -eq 1 ]; then
    Today="$(date +%Y-%m-%d)"
    ExpiratedTrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker_domain FROM trackers_list WHERE cert_expiration <= '$Today' AND is_active = '1';")"
    for ExpiratedTracker in $ExpiratedTrackersList; do
        log_daemon_msg "$RenewCertificate $ExpiratedTracker"
        rm -f ${MySB_InstallDir}/ssl/trackers/*$RemovedTracker.pem
        cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_ssl='0', to_check='1', cert_expiration='0000-00-00' WHERE tracker_domain = '$ExpiratedTracker';"
        gfnStatusLSB
    done
fi

#### Clean certificates with bad links
if [ $DoCleanCertificates -eq 1 ]; then
    #### Create again certificates listing in system
    log_daemon_msg "$CertificateRehash"
    c_rehash ${MySB_InstallDir}/ssl/trackers/ &>/dev/null
    update-ca-certificates --fresh &>/dev/null
    gfnStatusLSB

    log_daemon_msg "$CleanCertificatesBadLinks"
    LIST_CERTS=$(ls -la /etc/ssl/certs/ | awk '{ print $9 }')
    for Cert in ${LIST_CERTS}; do
        if [ "$Cert" != "" ] && [ "$Cert" != "." ] && [ "$Cert" != ".." ]; then
            TARGET=$(ls -la /etc/ssl/certs/$Cert | awk '{ print $11 }')
            if [ ! -f $TARGET ]; then
                rm -f /etc/ssl/certs/$Cert &>/dev/null
            fi
            unset Cert TARGET
        fi
    done
    unset LIST_CERTS
    gfnStatusLSB
fi

# Allow all trackers in BIND
perl -pi -e "s/^include \"\/etc\/bind\/MySB.zones.blakclists\";/#include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
gfnManageServices start "bind9"

#### Create trackers listing

# Check added torrents
if [ $DoCheckAddedTorrents -eq 1 ]; then
    gfnCheckAddedTorrents "${sUser}"
fi

#### Get certificates
bAutoBlockAnnoncers="$(cmdMySQL 'MySB_db' "SELECT block_annoncers FROM system WHERE id_system='1';")"
TrackersList="$(cmdMySQL 'MySB_db' "SELECT tracker FROM trackers_list WHERE to_check='1';")"
DoRehash=0

for Tracker in ${TrackersList}; do
    log_daemon_msg "${GetCertificateFor} ${Tracker}"
    if [ "$gbIsInstalled_PeerGuardian" == "YES" ] && [ -f /etc/pgl/allow.p2p ]; then
        RemoveAfter=0
        TrackersID="$(cmdMySQL 'MySB_db' "SELECT id_trackers_list FROM trackers_list WHERE tracker='${Tracker}';")"
        sValues="$(cmdMySQL 'MySB_db' "SELECT ipv4,pgl_banned FROM trackers_list_ipv4 WHERE id_trackers_list='${TrackersID}';" | sed 's/\t/|/g;')"
        sed -i "/${Tracker}/d" /etc/pgl/allow.p2p
        if [ -n "${sValues}" ]; then
            for sValue in ${sValues}; do
                IPv4="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[1]}')"
                bIsBanned="$(echo "${sValue}" | awk '{split($0,a,"|"); print a[2]}')"
                if [[ ${bAutoBlockAnnoncers} -eq 1 ]] && [[ ${bIsBanned} -eq 1 ]]; then
                    echo "The '${IPv4}' (${Tracker}) is banned by PeerGuardian !"
                else
                    echo "${Tracker}:${IPv4}-255.255.255.255" >>/etc/pgl/allow.p2p
                    sPingResult="$(ping -c2 -w3 "${IPv4}" | grep 'packets transmitted' | cut -d ',' -f 3)"
                    cmdMySQL 'MySB_db' "UPDATE trackers_list_ipv4 SET ping='${sPingResult}'WHERE id_trackers_list='${TrackersID}';"
                fi
            done
        else
            RemoveAfter=1
        fi
    fi

    cd ${MySB_InstallDir}/ssl/trackers/ || exit
    sRequestValues="$(cmdMySQL 'MySB_db' "SELECT tracker_proto,tracker_port FROM trackers_list WHERE tracker='${Tracker}';" | sed 's/\t/|/g;')"
    sTrackerProto="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[1]}')"
    sTrackerPort="$(echo "$sRequestValues" | awk '{split($0,a,"|"); print a[2]}')"
    sExpirationDate="0000-00-00"
    sCheckPort="${sTrackerPort}"
    bSsl=0

    # Try to get certificate for annoncers with HTTP
    # if [ "${sTrackerProto}" == "http" ] && [ "${sTrackerPort}" == "80" ]; then
    #     sCheckPort=443
    # fi

    if [ ! -h /etc/ssl/certs/${Tracker}.pem ] || [ ! -f ${MySB_InstallDir}/ssl/trackers/${Tracker}.pem ]; then
        timeout 10 bash -c "openssl s_client -connect ${Tracker}:${sCheckPort} </dev/null 2>/dev/null | sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' >> ./${Tracker}.crt"
        if [ -s ./${Tracker}.crt ]; then
            openssl x509 -in ./${Tracker}.crt -out ./${Tracker}.der -outform DER
            openssl x509 -in ./${Tracker}.der -inform DER -out ./${Tracker}.pem -outform PEM
            if [ -s ./${Tracker}.pem ]; then
                if [ -f /etc/ssl/certs/${Tracker}.pem ] || [ -h /etc/ssl/certs/${Tracker}.pem ]; then
                    rm -f /etc/ssl/certs/${Tracker}.pem
                fi
                ln -s ${MySB_InstallDir}/ssl/trackers/${Tracker}.pem /etc/ssl/certs/${Tracker}.pem
                # Extract certificate expiration date
                sExpirationDate="$(openssl x509 -enddate -noout -in ./${Tracker}.pem | cut -d "=" -f 2)"
                sExpirationDate="$(date -d "$sExpirationDate" '+%Y-%m-%d')"
                sExpirationDate="$(date --date "$sExpirationDate 2 days ago" '+%Y-%m-%d')"
                sTrackerPort="${sCheckPort}"
                sTrackerProto="https"
                bSsl=1
                DoRehash=1
            else
                rm ./${Tracker}.pem
            fi
            rm -f ./${Tracker}.der
        fi
    fi
    rm -f ./${Tracker}.crt

    # Update database
    cmdMySQL 'MySB_db' "UPDATE trackers_list SET is_ssl='${bSsl}', cert_expiration='${sExpirationDate}', to_check='0', tracker_proto='${sTrackerProto}', tracker_port='${sTrackerPort}' WHERE tracker='${Tracker}';"

    if [ "$gbIsInstalled_PeerGuardian" == "YES" ] && [ -f /etc/pgl/allow.p2p ] && [[ $RemoveAfter -eq 1 ]]; then
        sed -i "/${Tracker}/d" /etc/pgl/allow.p2p
    fi
    gfnStatusLSB
done

# if [ "$gbIsInstalled_PeerGuardian" == "YES" ]; then
#     ServicesToRestart="pglcmd"
# fi

# Block all inactive trackers in BIND
perl -pi -e "s/^#include \"\/etc\/bind\/MySB.zones.blakclists\";/include \"\/etc\/bind\/MySB.zones.blakclists\";/g" /etc/bind/named.conf.local
ServicesToRestart="${ServicesToRestart} bind9"

#### Restart services
gfnManageServices start "$ServicesToRestart"

#### Create again certificates listing in system
if [ "$DoRehash" == 1 ]; then
    log_daemon_msg "$CertificateRehash"
    c_rehash ${MySB_InstallDir}/ssl/trackers/ &>/dev/null
    update-ca-certificates --fresh &>/dev/null
    gfnStatusLSB
fi

#### Unlock
rm -f "/home/.check_annoncers_${sUser}.lock"

# -----------------------------------------
# shellcheck source=inc/includes_after
source "$(dirname "$0")"/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
